
week5-TIM_INC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041cc  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004364  08004364  00014364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004384  08004384  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004384  08004384  00014384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800438c  0800438c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800438c  0800438c  0001438c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004390  08004390  00014390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004394  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  20000010  080043a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080043a4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a680  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c9  00000000  00000000  0002a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc8  00000000  00000000  0002bf90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b00  00000000  00000000  0002cb58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015625  00000000  00000000  0002d658  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008044  00000000  00000000  00042c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088b9b  00000000  00000000  0004acc1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d385c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003290  00000000  00000000  000d38d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000010 	.word	0x20000010
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800434c 	.word	0x0800434c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000014 	.word	0x20000014
 80001d4:	0800434c 	.word	0x0800434c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_uldivmod>:
 80009c4:	b953      	cbnz	r3, 80009dc <__aeabi_uldivmod+0x18>
 80009c6:	b94a      	cbnz	r2, 80009dc <__aeabi_uldivmod+0x18>
 80009c8:	2900      	cmp	r1, #0
 80009ca:	bf08      	it	eq
 80009cc:	2800      	cmpeq	r0, #0
 80009ce:	bf1c      	itt	ne
 80009d0:	f04f 31ff 	movne.w	r1, #4294967295
 80009d4:	f04f 30ff 	movne.w	r0, #4294967295
 80009d8:	f000 b972 	b.w	8000cc0 <__aeabi_idiv0>
 80009dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009e4:	f000 f806 	bl	80009f4 <__udivmoddi4>
 80009e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f0:	b004      	add	sp, #16
 80009f2:	4770      	bx	lr

080009f4 <__udivmoddi4>:
 80009f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f8:	9e08      	ldr	r6, [sp, #32]
 80009fa:	4604      	mov	r4, r0
 80009fc:	4688      	mov	r8, r1
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d14b      	bne.n	8000a9a <__udivmoddi4+0xa6>
 8000a02:	428a      	cmp	r2, r1
 8000a04:	4615      	mov	r5, r2
 8000a06:	d967      	bls.n	8000ad8 <__udivmoddi4+0xe4>
 8000a08:	fab2 f282 	clz	r2, r2
 8000a0c:	b14a      	cbz	r2, 8000a22 <__udivmoddi4+0x2e>
 8000a0e:	f1c2 0720 	rsb	r7, r2, #32
 8000a12:	fa01 f302 	lsl.w	r3, r1, r2
 8000a16:	fa20 f707 	lsr.w	r7, r0, r7
 8000a1a:	4095      	lsls	r5, r2
 8000a1c:	ea47 0803 	orr.w	r8, r7, r3
 8000a20:	4094      	lsls	r4, r2
 8000a22:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a26:	0c23      	lsrs	r3, r4, #16
 8000a28:	fbb8 f7fe 	udiv	r7, r8, lr
 8000a2c:	fa1f fc85 	uxth.w	ip, r5
 8000a30:	fb0e 8817 	mls	r8, lr, r7, r8
 8000a34:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a38:	fb07 f10c 	mul.w	r1, r7, ip
 8000a3c:	4299      	cmp	r1, r3
 8000a3e:	d909      	bls.n	8000a54 <__udivmoddi4+0x60>
 8000a40:	18eb      	adds	r3, r5, r3
 8000a42:	f107 30ff 	add.w	r0, r7, #4294967295
 8000a46:	f080 811b 	bcs.w	8000c80 <__udivmoddi4+0x28c>
 8000a4a:	4299      	cmp	r1, r3
 8000a4c:	f240 8118 	bls.w	8000c80 <__udivmoddi4+0x28c>
 8000a50:	3f02      	subs	r7, #2
 8000a52:	442b      	add	r3, r5
 8000a54:	1a5b      	subs	r3, r3, r1
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a5c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000a60:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a64:	fb00 fc0c 	mul.w	ip, r0, ip
 8000a68:	45a4      	cmp	ip, r4
 8000a6a:	d909      	bls.n	8000a80 <__udivmoddi4+0x8c>
 8000a6c:	192c      	adds	r4, r5, r4
 8000a6e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a72:	f080 8107 	bcs.w	8000c84 <__udivmoddi4+0x290>
 8000a76:	45a4      	cmp	ip, r4
 8000a78:	f240 8104 	bls.w	8000c84 <__udivmoddi4+0x290>
 8000a7c:	3802      	subs	r0, #2
 8000a7e:	442c      	add	r4, r5
 8000a80:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000a84:	eba4 040c 	sub.w	r4, r4, ip
 8000a88:	2700      	movs	r7, #0
 8000a8a:	b11e      	cbz	r6, 8000a94 <__udivmoddi4+0xa0>
 8000a8c:	40d4      	lsrs	r4, r2
 8000a8e:	2300      	movs	r3, #0
 8000a90:	e9c6 4300 	strd	r4, r3, [r6]
 8000a94:	4639      	mov	r1, r7
 8000a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a9a:	428b      	cmp	r3, r1
 8000a9c:	d909      	bls.n	8000ab2 <__udivmoddi4+0xbe>
 8000a9e:	2e00      	cmp	r6, #0
 8000aa0:	f000 80eb 	beq.w	8000c7a <__udivmoddi4+0x286>
 8000aa4:	2700      	movs	r7, #0
 8000aa6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aaa:	4638      	mov	r0, r7
 8000aac:	4639      	mov	r1, r7
 8000aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab2:	fab3 f783 	clz	r7, r3
 8000ab6:	2f00      	cmp	r7, #0
 8000ab8:	d147      	bne.n	8000b4a <__udivmoddi4+0x156>
 8000aba:	428b      	cmp	r3, r1
 8000abc:	d302      	bcc.n	8000ac4 <__udivmoddi4+0xd0>
 8000abe:	4282      	cmp	r2, r0
 8000ac0:	f200 80fa 	bhi.w	8000cb8 <__udivmoddi4+0x2c4>
 8000ac4:	1a84      	subs	r4, r0, r2
 8000ac6:	eb61 0303 	sbc.w	r3, r1, r3
 8000aca:	2001      	movs	r0, #1
 8000acc:	4698      	mov	r8, r3
 8000ace:	2e00      	cmp	r6, #0
 8000ad0:	d0e0      	beq.n	8000a94 <__udivmoddi4+0xa0>
 8000ad2:	e9c6 4800 	strd	r4, r8, [r6]
 8000ad6:	e7dd      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000ad8:	b902      	cbnz	r2, 8000adc <__udivmoddi4+0xe8>
 8000ada:	deff      	udf	#255	; 0xff
 8000adc:	fab2 f282 	clz	r2, r2
 8000ae0:	2a00      	cmp	r2, #0
 8000ae2:	f040 808f 	bne.w	8000c04 <__udivmoddi4+0x210>
 8000ae6:	1b49      	subs	r1, r1, r5
 8000ae8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aec:	fa1f f885 	uxth.w	r8, r5
 8000af0:	2701      	movs	r7, #1
 8000af2:	fbb1 fcfe 	udiv	ip, r1, lr
 8000af6:	0c23      	lsrs	r3, r4, #16
 8000af8:	fb0e 111c 	mls	r1, lr, ip, r1
 8000afc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b00:	fb08 f10c 	mul.w	r1, r8, ip
 8000b04:	4299      	cmp	r1, r3
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0x124>
 8000b08:	18eb      	adds	r3, r5, r3
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0x122>
 8000b10:	4299      	cmp	r1, r3
 8000b12:	f200 80cd 	bhi.w	8000cb0 <__udivmoddi4+0x2bc>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1a59      	subs	r1, r3, r1
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1410 	mls	r4, lr, r0, r1
 8000b24:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x14c>
 8000b30:	192c      	adds	r4, r5, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x14a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80b6 	bhi.w	8000caa <__udivmoddi4+0x2b6>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e79f      	b.n	8000a8a <__udivmoddi4+0x96>
 8000b4a:	f1c7 0c20 	rsb	ip, r7, #32
 8000b4e:	40bb      	lsls	r3, r7
 8000b50:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000b54:	ea4e 0e03 	orr.w	lr, lr, r3
 8000b58:	fa01 f407 	lsl.w	r4, r1, r7
 8000b5c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000b60:	fa21 f30c 	lsr.w	r3, r1, ip
 8000b64:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000b68:	4325      	orrs	r5, r4
 8000b6a:	fbb3 f9f8 	udiv	r9, r3, r8
 8000b6e:	0c2c      	lsrs	r4, r5, #16
 8000b70:	fb08 3319 	mls	r3, r8, r9, r3
 8000b74:	fa1f fa8e 	uxth.w	sl, lr
 8000b78:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000b7c:	fb09 f40a 	mul.w	r4, r9, sl
 8000b80:	429c      	cmp	r4, r3
 8000b82:	fa02 f207 	lsl.w	r2, r2, r7
 8000b86:	fa00 f107 	lsl.w	r1, r0, r7
 8000b8a:	d90b      	bls.n	8000ba4 <__udivmoddi4+0x1b0>
 8000b8c:	eb1e 0303 	adds.w	r3, lr, r3
 8000b90:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b94:	f080 8087 	bcs.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b98:	429c      	cmp	r4, r3
 8000b9a:	f240 8084 	bls.w	8000ca6 <__udivmoddi4+0x2b2>
 8000b9e:	f1a9 0902 	sub.w	r9, r9, #2
 8000ba2:	4473      	add	r3, lr
 8000ba4:	1b1b      	subs	r3, r3, r4
 8000ba6:	b2ad      	uxth	r5, r5
 8000ba8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bac:	fb08 3310 	mls	r3, r8, r0, r3
 8000bb0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000bb4:	fb00 fa0a 	mul.w	sl, r0, sl
 8000bb8:	45a2      	cmp	sl, r4
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x1da>
 8000bbc:	eb1e 0404 	adds.w	r4, lr, r4
 8000bc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc4:	d26b      	bcs.n	8000c9e <__udivmoddi4+0x2aa>
 8000bc6:	45a2      	cmp	sl, r4
 8000bc8:	d969      	bls.n	8000c9e <__udivmoddi4+0x2aa>
 8000bca:	3802      	subs	r0, #2
 8000bcc:	4474      	add	r4, lr
 8000bce:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000bd2:	fba0 8902 	umull	r8, r9, r0, r2
 8000bd6:	eba4 040a 	sub.w	r4, r4, sl
 8000bda:	454c      	cmp	r4, r9
 8000bdc:	46c2      	mov	sl, r8
 8000bde:	464b      	mov	r3, r9
 8000be0:	d354      	bcc.n	8000c8c <__udivmoddi4+0x298>
 8000be2:	d051      	beq.n	8000c88 <__udivmoddi4+0x294>
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d069      	beq.n	8000cbc <__udivmoddi4+0x2c8>
 8000be8:	ebb1 050a 	subs.w	r5, r1, sl
 8000bec:	eb64 0403 	sbc.w	r4, r4, r3
 8000bf0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000bf4:	40fd      	lsrs	r5, r7
 8000bf6:	40fc      	lsrs	r4, r7
 8000bf8:	ea4c 0505 	orr.w	r5, ip, r5
 8000bfc:	e9c6 5400 	strd	r5, r4, [r6]
 8000c00:	2700      	movs	r7, #0
 8000c02:	e747      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c04:	f1c2 0320 	rsb	r3, r2, #32
 8000c08:	fa20 f703 	lsr.w	r7, r0, r3
 8000c0c:	4095      	lsls	r5, r2
 8000c0e:	fa01 f002 	lsl.w	r0, r1, r2
 8000c12:	fa21 f303 	lsr.w	r3, r1, r3
 8000c16:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c1a:	4338      	orrs	r0, r7
 8000c1c:	0c01      	lsrs	r1, r0, #16
 8000c1e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000c22:	fa1f f885 	uxth.w	r8, r5
 8000c26:	fb0e 3317 	mls	r3, lr, r7, r3
 8000c2a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c2e:	fb07 f308 	mul.w	r3, r7, r8
 8000c32:	428b      	cmp	r3, r1
 8000c34:	fa04 f402 	lsl.w	r4, r4, r2
 8000c38:	d907      	bls.n	8000c4a <__udivmoddi4+0x256>
 8000c3a:	1869      	adds	r1, r5, r1
 8000c3c:	f107 3cff 	add.w	ip, r7, #4294967295
 8000c40:	d22f      	bcs.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d92d      	bls.n	8000ca2 <__udivmoddi4+0x2ae>
 8000c46:	3f02      	subs	r7, #2
 8000c48:	4429      	add	r1, r5
 8000c4a:	1acb      	subs	r3, r1, r3
 8000c4c:	b281      	uxth	r1, r0
 8000c4e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c52:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c5a:	fb00 f308 	mul.w	r3, r0, r8
 8000c5e:	428b      	cmp	r3, r1
 8000c60:	d907      	bls.n	8000c72 <__udivmoddi4+0x27e>
 8000c62:	1869      	adds	r1, r5, r1
 8000c64:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c68:	d217      	bcs.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d915      	bls.n	8000c9a <__udivmoddi4+0x2a6>
 8000c6e:	3802      	subs	r0, #2
 8000c70:	4429      	add	r1, r5
 8000c72:	1ac9      	subs	r1, r1, r3
 8000c74:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000c78:	e73b      	b.n	8000af2 <__udivmoddi4+0xfe>
 8000c7a:	4637      	mov	r7, r6
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e709      	b.n	8000a94 <__udivmoddi4+0xa0>
 8000c80:	4607      	mov	r7, r0
 8000c82:	e6e7      	b.n	8000a54 <__udivmoddi4+0x60>
 8000c84:	4618      	mov	r0, r3
 8000c86:	e6fb      	b.n	8000a80 <__udivmoddi4+0x8c>
 8000c88:	4541      	cmp	r1, r8
 8000c8a:	d2ab      	bcs.n	8000be4 <__udivmoddi4+0x1f0>
 8000c8c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000c90:	eb69 020e 	sbc.w	r2, r9, lr
 8000c94:	3801      	subs	r0, #1
 8000c96:	4613      	mov	r3, r2
 8000c98:	e7a4      	b.n	8000be4 <__udivmoddi4+0x1f0>
 8000c9a:	4660      	mov	r0, ip
 8000c9c:	e7e9      	b.n	8000c72 <__udivmoddi4+0x27e>
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	e795      	b.n	8000bce <__udivmoddi4+0x1da>
 8000ca2:	4667      	mov	r7, ip
 8000ca4:	e7d1      	b.n	8000c4a <__udivmoddi4+0x256>
 8000ca6:	4681      	mov	r9, r0
 8000ca8:	e77c      	b.n	8000ba4 <__udivmoddi4+0x1b0>
 8000caa:	3802      	subs	r0, #2
 8000cac:	442c      	add	r4, r5
 8000cae:	e747      	b.n	8000b40 <__udivmoddi4+0x14c>
 8000cb0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cb4:	442b      	add	r3, r5
 8000cb6:	e72f      	b.n	8000b18 <__udivmoddi4+0x124>
 8000cb8:	4638      	mov	r0, r7
 8000cba:	e708      	b.n	8000ace <__udivmoddi4+0xda>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0xa0>

08000cc0 <__aeabi_idiv0>:
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8000cc8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fc6b 	bl	80015a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f847 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 f98b 	bl	8000fec <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f000 f969 	bl	8000fac <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000cda:	f000 f93d 	bl	8000f58 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000cde:	f000 f8a7 	bl	8000e30 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000ce2:	f000 f915 	bl	8000f10 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
HAL_TIM_Base_Start_IT(&htim5);
 8000ce6:	4818      	ldr	r0, [pc, #96]	; (8000d48 <main+0x84>)
 8000ce8:	f001 ffb5 	bl	8002c56 <HAL_TIM_Base_Start_IT>
HAL_TIM_Base_Start(&htim2);
 8000cec:	4817      	ldr	r0, [pc, #92]	; (8000d4c <main+0x88>)
 8000cee:	f001 ff8e 	bl	8002c0e <HAL_TIM_Base_Start>
HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, (uint32_t*)capturedata, capturenum);
 8000cf2:	2310      	movs	r3, #16
 8000cf4:	4a16      	ldr	r2, [pc, #88]	; (8000d50 <main+0x8c>)
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <main+0x88>)
 8000cfa:	f002 f805 	bl	8002d08 <HAL_TIM_IC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(micro()-timestamp>=100000)
 8000cfe:	f000 f9e5 	bl	80010cc <micro>
 8000d02:	460a      	mov	r2, r1
 8000d04:	4601      	mov	r1, r0
 8000d06:	4b13      	ldr	r3, [pc, #76]	; (8000d54 <main+0x90>)
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	469b      	mov	fp, r3
 8000d0c:	f04f 0c00 	mov.w	ip, #0
 8000d10:	460b      	mov	r3, r1
 8000d12:	4614      	mov	r4, r2
 8000d14:	ebb3 030b 	subs.w	r3, r3, fp
 8000d18:	eb64 040c 	sbc.w	r4, r4, ip
 8000d1c:	490e      	ldr	r1, [pc, #56]	; (8000d58 <main+0x94>)
 8000d1e:	f04f 0200 	mov.w	r2, #0
 8000d22:	42a2      	cmp	r2, r4
 8000d24:	bf08      	it	eq
 8000d26:	4299      	cmpeq	r1, r3
 8000d28:	d20a      	bcs.n	8000d40 <main+0x7c>
	  {
		  timestamp = micro();
 8000d2a:	f000 f9cf 	bl	80010cc <micro>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	460c      	mov	r4, r1
 8000d32:	461a      	mov	r2, r3
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <main+0x90>)
 8000d36:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	4808      	ldr	r0, [pc, #32]	; (8000d5c <main+0x98>)
 8000d3c:	f001 fabf 	bl	80022be <HAL_GPIO_TogglePin>
	  }
	  SpeedMotor();
 8000d40:	f000 f9ee 	bl	8001120 <SpeedMotor>
	  if(micro()-timestamp>=100000)
 8000d44:	e7db      	b.n	8000cfe <main+0x3a>
 8000d46:	bf00      	nop
 8000d48:	20000118 	.word	0x20000118
 8000d4c:	20000158 	.word	0x20000158
 8000d50:	20000034 	.word	0x20000034
 8000d54:	20000030 	.word	0x20000030
 8000d58:	0001869f 	.word	0x0001869f
 8000d5c:	40020000 	.word	0x40020000

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fae4 	bl	800433c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <SystemClock_Config+0xc8>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a26      	ldr	r2, [pc, #152]	; (8000e28 <SystemClock_Config+0xc8>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b24      	ldr	r3, [pc, #144]	; (8000e28 <SystemClock_Config+0xc8>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b21      	ldr	r3, [pc, #132]	; (8000e2c <SystemClock_Config+0xcc>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	4a20      	ldr	r2, [pc, #128]	; (8000e2c <SystemClock_Config+0xcc>)
 8000daa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dae:	6013      	str	r3, [r2, #0]
 8000db0:	4b1e      	ldr	r3, [pc, #120]	; (8000e2c <SystemClock_Config+0xcc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000dd0:	2308      	movs	r3, #8
 8000dd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000dd4:	2364      	movs	r3, #100	; 0x64
 8000dd6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ddc:	2304      	movs	r3, #4
 8000dde:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de0:	f107 0320 	add.w	r3, r7, #32
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fa85 	bl	80022f4 <HAL_RCC_OscConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000df0:	f000 fa32 	bl	8001258 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000df4:	230f      	movs	r3, #15
 8000df6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e04:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000e0a:	f107 030c 	add.w	r3, r7, #12
 8000e0e:	2103      	movs	r1, #3
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fcdf 	bl	80027d4 <HAL_RCC_ClockConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000e1c:	f000 fa1c 	bl	8001258 <Error_Handler>
  }
}
 8000e20:	bf00      	nop
 8000e22:	3750      	adds	r7, #80	; 0x50
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	40023800 	.word	0x40023800
 8000e2c:	40007000 	.word	0x40007000

08000e30 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	; 0x28
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e36:	f107 0318 	add.w	r3, r7, #24
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e44:	f107 0310 	add.w	r3, r7, #16
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e5a:	4b2c      	ldr	r3, [pc, #176]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e5c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e60:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8000e62:	4b2a      	ldr	r3, [pc, #168]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e64:	2263      	movs	r2, #99	; 0x63
 8000e66:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e68:	4b28      	ldr	r3, [pc, #160]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000e6e:	4b27      	ldr	r3, [pc, #156]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e70:	f04f 32ff 	mov.w	r2, #4294967295
 8000e74:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e76:	4b25      	ldr	r3, [pc, #148]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e7c:	4b23      	ldr	r3, [pc, #140]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e82:	4822      	ldr	r0, [pc, #136]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000e84:	f001 fe98 	bl	8002bb8 <HAL_TIM_Base_Init>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e8e:	f000 f9e3 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e96:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e98:	f107 0318 	add.w	r3, r7, #24
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	481b      	ldr	r0, [pc, #108]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000ea0:	f002 fa08 	bl	80032b4 <HAL_TIM_ConfigClockSource>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000eaa:	f000 f9d5 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000eae:	4817      	ldr	r0, [pc, #92]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000eb0:	f001 fef5 	bl	8002c9e <HAL_TIM_IC_Init>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000eba:	f000 f9cd 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ec6:	f107 0310 	add.w	r3, r7, #16
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480f      	ldr	r0, [pc, #60]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000ece:	f002 fdc5 	bl	8003a5c <HAL_TIMEx_MasterConfigSynchronization>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000ed8:	f000 f9be 	bl	8001258 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000edc:	2300      	movs	r3, #0
 8000ede:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ee0:	2301      	movs	r3, #1
 8000ee2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 2;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	; (8000f0c <MX_TIM2_Init+0xdc>)
 8000ef4:	f002 f942 	bl	800317c <HAL_TIM_IC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000efe:	f000 f9ab 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3728      	adds	r7, #40	; 0x28
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000158 	.word	0x20000158

08000f10 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM5_Init 0 */

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <MX_TIM5_Init+0x44>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 99;
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f1c:	2263      	movs	r2, #99	; 0x63
 8000f1e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f28:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_OnePulse_Init(&htim5, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f3a:	2108      	movs	r1, #8
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_TIM5_Init+0x40>)
 8000f3e:	f001 ffd9 	bl	8002ef4 <HAL_TIM_OnePulse_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_TIM5_Init+0x3c>
  {
    Error_Handler();
 8000f48:	f000 f986 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000118 	.word	0x20000118
 8000f54:	40000c00 	.word	0x40000c00

08000f58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <MX_USART2_UART_Init+0x50>)
 8000f60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f64:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6a:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f70:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f76:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f7c:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f7e:	220c      	movs	r2, #12
 8000f80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f88:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f8e:	4805      	ldr	r0, [pc, #20]	; (8000fa4 <MX_USART2_UART_Init+0x4c>)
 8000f90:	f002 fde6 	bl	8003b60 <HAL_UART_Init>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f9a:	f000 f95d 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	20000198 	.word	0x20000198
 8000fa8:	40004400 	.word	0x40004400

08000fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	2010      	movs	r0, #16
 8000fd4:	f000 fc33 	bl	800183e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fd8:	2010      	movs	r0, #16
 8000fda:	f000 fc4c 	bl	8001876 <HAL_NVIC_EnableIRQ>

}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40023800 	.word	0x40023800

08000fec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff2:	f107 0314 	add.w	r3, r7, #20
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
 8000ffe:	60da      	str	r2, [r3, #12]
 8001000:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
 8001006:	4b2d      	ldr	r3, [pc, #180]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <MX_GPIO_Init+0xd0>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b2a      	ldr	r3, [pc, #168]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800101e:	2300      	movs	r3, #0
 8001020:	60fb      	str	r3, [r7, #12]
 8001022:	4b26      	ldr	r3, [pc, #152]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	4a25      	ldr	r2, [pc, #148]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001028:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800102c:	6313      	str	r3, [r2, #48]	; 0x30
 800102e:	4b23      	ldr	r3, [pc, #140]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001036:	60fb      	str	r3, [r7, #12]
 8001038:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	60bb      	str	r3, [r7, #8]
 800103e:	4b1f      	ldr	r3, [pc, #124]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a1e      	ldr	r2, [pc, #120]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001044:	f043 0301 	orr.w	r3, r3, #1
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <MX_GPIO_Init+0xd0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0301 	and.w	r3, r3, #1
 8001052:	60bb      	str	r3, [r7, #8]
 8001054:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	607b      	str	r3, [r7, #4]
 800105a:	4b18      	ldr	r3, [pc, #96]	; (80010bc <MX_GPIO_Init+0xd0>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a17      	ldr	r2, [pc, #92]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001060:	f043 0302 	orr.w	r3, r3, #2
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_GPIO_Init+0xd0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0302 	and.w	r3, r3, #2
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001072:	2200      	movs	r2, #0
 8001074:	2120      	movs	r1, #32
 8001076:	4812      	ldr	r0, [pc, #72]	; (80010c0 <MX_GPIO_Init+0xd4>)
 8001078:	f001 f908 	bl	800228c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800107c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001080:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <MX_GPIO_Init+0xd8>)
 8001084:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800108a:	f107 0314 	add.w	r3, r7, #20
 800108e:	4619      	mov	r1, r3
 8001090:	480d      	ldr	r0, [pc, #52]	; (80010c8 <MX_GPIO_Init+0xdc>)
 8001092:	f000 ff79 	bl	8001f88 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001096:	2320      	movs	r3, #32
 8001098:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109a:	2301      	movs	r3, #1
 800109c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a2:	2300      	movs	r3, #0
 80010a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4619      	mov	r1, r3
 80010ac:	4804      	ldr	r0, [pc, #16]	; (80010c0 <MX_GPIO_Init+0xd4>)
 80010ae:	f000 ff6b 	bl	8001f88 <HAL_GPIO_Init>

}
 80010b2:	bf00      	nop
 80010b4:	3728      	adds	r7, #40	; 0x28
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000
 80010c4:	10210000 	.word	0x10210000
 80010c8:	40020800 	.word	0x40020800

080010cc <micro>:

/* USER CODE BEGIN 4 */
uint64_t micro()
{
 80010cc:	b490      	push	{r4, r7}
 80010ce:	af00      	add	r7, sp, #0
	return _micro + htim5.Instance->CNT;
 80010d0:	4b06      	ldr	r3, [pc, #24]	; (80010ec <micro+0x20>)
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010d6:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <micro+0x24>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4413      	add	r3, r2
 80010dc:	f04f 0400 	mov.w	r4, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	4621      	mov	r1, r4
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bc90      	pop	{r4, r7}
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	20000118 	.word	0x20000118
 80010f0:	2000002c 	.word	0x2000002c

080010f4 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d103      	bne.n	800110c <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		_micro += 4294967296;
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <HAL_TIM_PeriodElapsedCallback+0x28>)
 800110a:	6013      	str	r3, [r2, #0]
	}
}
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	20000118 	.word	0x20000118
 800111c:	2000002c 	.word	0x2000002c

08001120 <SpeedMotor>:
void SpeedMotor()
{
 8001120:	b5b0      	push	{r4, r5, r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
	uint32_t Position = capturenum -  __HAL_DMA_GET_COUNTER(htim2.hdma[TIM_DMA_ID_CC1]);
 8001126:	4b44      	ldr	r3, [pc, #272]	; (8001238 <SpeedMotor+0x118>)
 8001128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f1c3 0310 	rsb	r3, r3, #16
 8001132:	607b      	str	r3, [r7, #4]
	uint32_t Sum = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	60fb      	str	r3, [r7, #12]
	for( int i=0; i<capturenum-1; i++)
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	e02f      	b.n	800119e <SpeedMotor+0x7e>
	{
		Difftime[i]=capturedata[(Position+1+i)%capturenum]-capturedata[(Position+i)%capturenum];
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4413      	add	r3, r2
 8001144:	3301      	adds	r3, #1
 8001146:	f003 030f 	and.w	r3, r3, #15
 800114a:	4a3c      	ldr	r2, [pc, #240]	; (800123c <SpeedMotor+0x11c>)
 800114c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001150:	68b9      	ldr	r1, [r7, #8]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	440b      	add	r3, r1
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	4938      	ldr	r1, [pc, #224]	; (800123c <SpeedMotor+0x11c>)
 800115c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	4619      	mov	r1, r3
 8001164:	4a36      	ldr	r2, [pc, #216]	; (8001240 <SpeedMotor+0x120>)
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if(Difftime[i]<0)
 800116c:	4a34      	ldr	r2, [pc, #208]	; (8001240 <SpeedMotor+0x120>)
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001174:	2b00      	cmp	r3, #0
 8001176:	da07      	bge.n	8001188 <SpeedMotor+0x68>
		{
			Difftime[i]+=4294967296;
 8001178:	4a31      	ldr	r2, [pc, #196]	; (8001240 <SpeedMotor+0x120>)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001180:	492f      	ldr	r1, [pc, #188]	; (8001240 <SpeedMotor+0x120>)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		Sum += Difftime[i];
 8001188:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <SpeedMotor+0x120>)
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001190:	461a      	mov	r2, r3
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4413      	add	r3, r2
 8001196:	60fb      	str	r3, [r7, #12]
	for( int i=0; i<capturenum-1; i++)
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	3301      	adds	r3, #1
 800119c:	60bb      	str	r3, [r7, #8]
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	2b0e      	cmp	r3, #14
 80011a2:	ddcc      	ble.n	800113e <SpeedMotor+0x1e>
	}
	Meantime = Sum / (float)(capturenum -1);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	ee07 3a90 	vmov	s15, r3
 80011aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011ae:	eef2 6a0e 	vmov.f32	s13, #46	; 0x41700000  15.0
 80011b2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011b6:	4b23      	ldr	r3, [pc, #140]	; (8001244 <SpeedMotor+0x124>)
 80011b8:	edc3 7a00 	vstr	s15, [r3]
//	Frequency = 1/(Meantime*0.000001);
//	RPM = (Frequency * 60)/(PPR*64);
	RPM = 60/(Meantime*0.000001*PPR*64); //gear ratio = 64
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <SpeedMotor+0x124>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff f96d 	bl	80004a0 <__aeabi_f2d>
 80011c6:	a31a      	add	r3, pc, #104	; (adr r3, 8001230 <SpeedMotor+0x110>)
 80011c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011cc:	f7ff f9c0 	bl	8000550 <__aeabi_dmul>
 80011d0:	4603      	mov	r3, r0
 80011d2:	460c      	mov	r4, r1
 80011d4:	4625      	mov	r5, r4
 80011d6:	461c      	mov	r4, r3
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <SpeedMotor+0x128>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f94d 	bl	800047c <__aeabi_i2d>
 80011e2:	4602      	mov	r2, r0
 80011e4:	460b      	mov	r3, r1
 80011e6:	4620      	mov	r0, r4
 80011e8:	4629      	mov	r1, r5
 80011ea:	f7ff f9b1 	bl	8000550 <__aeabi_dmul>
 80011ee:	4603      	mov	r3, r0
 80011f0:	460c      	mov	r4, r1
 80011f2:	4618      	mov	r0, r3
 80011f4:	4621      	mov	r1, r4
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <SpeedMotor+0x12c>)
 80011fc:	f7ff f9a8 	bl	8000550 <__aeabi_dmul>
 8001200:	4603      	mov	r3, r0
 8001202:	460c      	mov	r4, r1
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	f04f 0000 	mov.w	r0, #0
 800120c:	4910      	ldr	r1, [pc, #64]	; (8001250 <SpeedMotor+0x130>)
 800120e:	f7ff fac9 	bl	80007a4 <__aeabi_ddiv>
 8001212:	4603      	mov	r3, r0
 8001214:	460c      	mov	r4, r1
 8001216:	4618      	mov	r0, r3
 8001218:	4621      	mov	r1, r4
 800121a:	f7ff fbab 	bl	8000974 <__aeabi_d2iz>
 800121e:	4602      	mov	r2, r0
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <SpeedMotor+0x134>)
 8001222:	601a      	str	r2, [r3, #0]
}
 8001224:	bf00      	nop
 8001226:	3710      	adds	r7, #16
 8001228:	46bd      	mov	sp, r7
 800122a:	bdb0      	pop	{r4, r5, r7, pc}
 800122c:	f3af 8000 	nop.w
 8001230:	a0b5ed8d 	.word	0xa0b5ed8d
 8001234:	3eb0c6f7 	.word	0x3eb0c6f7
 8001238:	20000158 	.word	0x20000158
 800123c:	20000034 	.word	0x20000034
 8001240:	20000074 	.word	0x20000074
 8001244:	200000b0 	.word	0x200000b0
 8001248:	20000000 	.word	0x20000000
 800124c:	40500000 	.word	0x40500000
 8001250:	404e0000 	.word	0x404e0000
 8001254:	200000b4 	.word	0x200000b4

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800125e:	e7fe      	b.n	800125e <Error_Handler+0x6>

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
 800126a:	4b10      	ldr	r3, [pc, #64]	; (80012ac <HAL_MspInit+0x4c>)
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	4a0f      	ldr	r2, [pc, #60]	; (80012ac <HAL_MspInit+0x4c>)
 8001270:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001274:	6453      	str	r3, [r2, #68]	; 0x44
 8001276:	4b0d      	ldr	r3, [pc, #52]	; (80012ac <HAL_MspInit+0x4c>)
 8001278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800127e:	607b      	str	r3, [r7, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	603b      	str	r3, [r7, #0]
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <HAL_MspInit+0x4c>)
 8001288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128a:	4a08      	ldr	r2, [pc, #32]	; (80012ac <HAL_MspInit+0x4c>)
 800128c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001290:	6413      	str	r3, [r2, #64]	; 0x40
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_MspInit+0x4c>)
 8001294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800129a:	603b      	str	r3, [r7, #0]
 800129c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800129e:	2007      	movs	r0, #7
 80012a0:	f000 fac2 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012a4:	bf00      	nop
 80012a6:	3708      	adds	r7, #8
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40023800 	.word	0x40023800

080012b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08a      	sub	sp, #40	; 0x28
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012d0:	d164      	bne.n	800139c <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	4b33      	ldr	r3, [pc, #204]	; (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	4a32      	ldr	r2, [pc, #200]	; (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6413      	str	r3, [r2, #64]	; 0x40
 80012e2:	4b30      	ldr	r3, [pc, #192]	; (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	4b2c      	ldr	r3, [pc, #176]	; (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a2b      	ldr	r2, [pc, #172]	; (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b29      	ldr	r3, [pc, #164]	; (80013a4 <HAL_TIM_Base_MspInit+0xf4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60fb      	str	r3, [r7, #12]
 8001308:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800130a:	2301      	movs	r3, #1
 800130c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800131a:	2301      	movs	r3, #1
 800131c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131e:	f107 0314 	add.w	r3, r7, #20
 8001322:	4619      	mov	r1, r3
 8001324:	4820      	ldr	r0, [pc, #128]	; (80013a8 <HAL_TIM_Base_MspInit+0xf8>)
 8001326:	f000 fe2f 	bl	8001f88 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800132a:	4b20      	ldr	r3, [pc, #128]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 800132c:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <HAL_TIM_Base_MspInit+0x100>)
 800132e:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001332:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001336:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001338:	4b1c      	ldr	r3, [pc, #112]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 800133a:	2200      	movs	r2, #0
 800133c:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800133e:	4b1b      	ldr	r3, [pc, #108]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001340:	2200      	movs	r2, #0
 8001342:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001344:	4b19      	ldr	r3, [pc, #100]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001346:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800134a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800134c:	4b17      	ldr	r3, [pc, #92]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 800134e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001352:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001354:	4b15      	ldr	r3, [pc, #84]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001356:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800135a:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 800135c:	4b13      	ldr	r3, [pc, #76]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 800135e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001362:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001364:	4b11      	ldr	r3, [pc, #68]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001366:	2200      	movs	r2, #0
 8001368:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800136a:	4b10      	ldr	r3, [pc, #64]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 800136c:	2200      	movs	r2, #0
 800136e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001370:	480e      	ldr	r0, [pc, #56]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001372:	f000 fa9b 	bl	80018ac <HAL_DMA_Init>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d001      	beq.n	8001380 <HAL_TIM_Base_MspInit+0xd0>
    {
      Error_Handler();
 800137c:	f7ff ff6c 	bl	8001258 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001384:	625a      	str	r2, [r3, #36]	; 0x24
 8001386:	4a09      	ldr	r2, [pc, #36]	; (80013ac <HAL_TIM_Base_MspInit+0xfc>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800138c:	2200      	movs	r2, #0
 800138e:	2100      	movs	r1, #0
 8001390:	201c      	movs	r0, #28
 8001392:	f000 fa54 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001396:	201c      	movs	r0, #28
 8001398:	f000 fa6d 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800139c:	bf00      	nop
 800139e:	3728      	adds	r7, #40	; 0x28
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	200000b8 	.word	0x200000b8
 80013b0:	40026088 	.word	0x40026088

080013b4 <HAL_TIM_OnePulse_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_onepulse: TIM_OnePulse handle pointer
* @retval None
*/
void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef* htim_onepulse)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  if(htim_onepulse->Instance==TIM5)
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0e      	ldr	r2, [pc, #56]	; (80013fc <HAL_TIM_OnePulse_MspInit+0x48>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d115      	bne.n	80013f2 <HAL_TIM_OnePulse_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_TIM_OnePulse_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	4a0c      	ldr	r2, [pc, #48]	; (8001400 <HAL_TIM_OnePulse_MspInit+0x4c>)
 80013d0:	f043 0308 	orr.w	r3, r3, #8
 80013d4:	6413      	str	r3, [r2, #64]	; 0x40
 80013d6:	4b0a      	ldr	r3, [pc, #40]	; (8001400 <HAL_TIM_OnePulse_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 0308 	and.w	r3, r3, #8
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80013e2:	2200      	movs	r2, #0
 80013e4:	2100      	movs	r1, #0
 80013e6:	2032      	movs	r0, #50	; 0x32
 80013e8:	f000 fa29 	bl	800183e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80013ec:	2032      	movs	r0, #50	; 0x32
 80013ee:	f000 fa42 	bl	8001876 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80013f2:	bf00      	nop
 80013f4:	3710      	adds	r7, #16
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	40000c00 	.word	0x40000c00
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_UART_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d12b      	bne.n	800147e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_UART_MspInit+0x88>)
 800142c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_UART_MspInit+0x88>)
 8001430:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001434:	6413      	str	r3, [r2, #64]	; 0x40
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_UART_MspInit+0x88>)
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <HAL_UART_MspInit+0x88>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	4a10      	ldr	r2, [pc, #64]	; (800148c <HAL_UART_MspInit+0x88>)
 800144c:	f043 0301 	orr.w	r3, r3, #1
 8001450:	6313      	str	r3, [r2, #48]	; 0x30
 8001452:	4b0e      	ldr	r3, [pc, #56]	; (800148c <HAL_UART_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	f003 0301 	and.w	r3, r3, #1
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800145e:	230c      	movs	r3, #12
 8001460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001462:	2302      	movs	r3, #2
 8001464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001466:	2300      	movs	r3, #0
 8001468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800146a:	2303      	movs	r3, #3
 800146c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800146e:	2307      	movs	r3, #7
 8001470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4805      	ldr	r0, [pc, #20]	; (8001490 <HAL_UART_MspInit+0x8c>)
 800147a:	f000 fd85 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	; 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	40004400 	.word	0x40004400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020000 	.word	0x40020000

08001494 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <NMI_Handler+0x4>

0800149a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800149e:	e7fe      	b.n	800149e <HardFault_Handler+0x4>

080014a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <MemManage_Handler+0x4>

080014a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <BusFault_Handler+0x4>

080014ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <UsageFault_Handler+0x4>

080014b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014b6:	bf00      	nop
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr

080014c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr

080014ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ce:	b480      	push	{r7}
 80014d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014d2:	bf00      	nop
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr

080014dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e0:	f000 f8b2 	bl	8001648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014e4:	bf00      	nop
 80014e6:	bd80      	pop	{r7, pc}

080014e8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <DMA1_Stream5_IRQHandler+0x10>)
 80014ee:	f000 fae3 	bl	8001ab8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	200000b8 	.word	0x200000b8

080014fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001500:	4802      	ldr	r0, [pc, #8]	; (800150c <TIM2_IRQHandler+0x10>)
 8001502:	f001 fd33 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001506:	bf00      	nop
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000158 	.word	0x20000158

08001510 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001514:	4802      	ldr	r0, [pc, #8]	; (8001520 <TIM5_IRQHandler+0x10>)
 8001516:	f001 fd29 	bl	8002f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000118 	.word	0x20000118

08001524 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001528:	4b08      	ldr	r3, [pc, #32]	; (800154c <SystemInit+0x28>)
 800152a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800152e:	4a07      	ldr	r2, [pc, #28]	; (800154c <SystemInit+0x28>)
 8001530:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001534:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001538:	4b04      	ldr	r3, [pc, #16]	; (800154c <SystemInit+0x28>)
 800153a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800153e:	609a      	str	r2, [r3, #8]
#endif
}
 8001540:	bf00      	nop
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001550:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001588 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001554:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001556:	e003      	b.n	8001560 <LoopCopyDataInit>

08001558 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001558:	4b0c      	ldr	r3, [pc, #48]	; (800158c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800155a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800155c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800155e:	3104      	adds	r1, #4

08001560 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001560:	480b      	ldr	r0, [pc, #44]	; (8001590 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001564:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001566:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001568:	d3f6      	bcc.n	8001558 <CopyDataInit>
  ldr  r2, =_sbss
 800156a:	4a0b      	ldr	r2, [pc, #44]	; (8001598 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800156c:	e002      	b.n	8001574 <LoopFillZerobss>

0800156e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800156e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001570:	f842 3b04 	str.w	r3, [r2], #4

08001574 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001576:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001578:	d3f9      	bcc.n	800156e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800157a:	f7ff ffd3 	bl	8001524 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800157e:	f002 feb9 	bl	80042f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001582:	f7ff fb9f 	bl	8000cc4 <main>
  bx  lr    
 8001586:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001588:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800158c:	08004394 	.word	0x08004394
  ldr  r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001594:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8001598:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 800159c:	200001dc 	.word	0x200001dc

080015a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a0:	e7fe      	b.n	80015a0 <ADC_IRQHandler>
	...

080015a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_Init+0x40>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <HAL_Init+0x40>)
 80015ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b4:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_Init+0x40>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <HAL_Init+0x40>)
 80015ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c0:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <HAL_Init+0x40>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a07      	ldr	r2, [pc, #28]	; (80015e4 <HAL_Init+0x40>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015cc:	2003      	movs	r0, #3
 80015ce:	f000 f92b 	bl	8001828 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d2:	2000      	movs	r0, #0
 80015d4:	f000 f808 	bl	80015e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015d8:	f7ff fe42 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40023c00 	.word	0x40023c00

080015e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f0:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_InitTick+0x54>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x58>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	4619      	mov	r1, r3
 80015fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001602:	fbb2 f3f3 	udiv	r3, r2, r3
 8001606:	4618      	mov	r0, r3
 8001608:	f000 f943 	bl	8001892 <HAL_SYSTICK_Config>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
 8001614:	e00e      	b.n	8001634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b0f      	cmp	r3, #15
 800161a:	d80a      	bhi.n	8001632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800161c:	2200      	movs	r2, #0
 800161e:	6879      	ldr	r1, [r7, #4]
 8001620:	f04f 30ff 	mov.w	r0, #4294967295
 8001624:	f000 f90b 	bl	800183e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001628:	4a06      	ldr	r2, [pc, #24]	; (8001644 <HAL_InitTick+0x5c>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800162e:	2300      	movs	r3, #0
 8001630:	e000      	b.n	8001634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000004 	.word	0x20000004
 8001640:	2000000c 	.word	0x2000000c
 8001644:	20000008 	.word	0x20000008

08001648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800164c:	4b06      	ldr	r3, [pc, #24]	; (8001668 <HAL_IncTick+0x20>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	461a      	mov	r2, r3
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x24>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4413      	add	r3, r2
 8001658:	4a04      	ldr	r2, [pc, #16]	; (800166c <HAL_IncTick+0x24>)
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	2000000c 	.word	0x2000000c
 800166c:	200001d8 	.word	0x200001d8

08001670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  return uwTick;
 8001674:	4b03      	ldr	r3, [pc, #12]	; (8001684 <HAL_GetTick+0x14>)
 8001676:	681b      	ldr	r3, [r3, #0]
}
 8001678:	4618      	mov	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	200001d8 	.word	0x200001d8

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017f4:	d301      	bcc.n	80017fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017f6:	2301      	movs	r3, #1
 80017f8:	e00f      	b.n	800181a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <SysTick_Config+0x40>)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	3b01      	subs	r3, #1
 8001800:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001802:	210f      	movs	r1, #15
 8001804:	f04f 30ff 	mov.w	r0, #4294967295
 8001808:	f7ff ff8e 	bl	8001728 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <SysTick_Config+0x40>)
 800180e:	2200      	movs	r2, #0
 8001810:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001812:	4b04      	ldr	r3, [pc, #16]	; (8001824 <SysTick_Config+0x40>)
 8001814:	2207      	movs	r2, #7
 8001816:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001818:	2300      	movs	r3, #0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	e000e010 	.word	0xe000e010

08001828 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f7ff ff29 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 8001836:	bf00      	nop
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800183e:	b580      	push	{r7, lr}
 8001840:	b086      	sub	sp, #24
 8001842:	af00      	add	r7, sp, #0
 8001844:	4603      	mov	r3, r0
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	607a      	str	r2, [r7, #4]
 800184a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001850:	f7ff ff3e 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 8001854:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	68b9      	ldr	r1, [r7, #8]
 800185a:	6978      	ldr	r0, [r7, #20]
 800185c:	f7ff ff8e 	bl	800177c <NVIC_EncodePriority>
 8001860:	4602      	mov	r2, r0
 8001862:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001866:	4611      	mov	r1, r2
 8001868:	4618      	mov	r0, r3
 800186a:	f7ff ff5d 	bl	8001728 <__NVIC_SetPriority>
}
 800186e:	bf00      	nop
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b082      	sub	sp, #8
 800187a:	af00      	add	r7, sp, #0
 800187c:	4603      	mov	r3, r0
 800187e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff31 	bl	80016ec <__NVIC_EnableIRQ>
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800189a:	6878      	ldr	r0, [r7, #4]
 800189c:	f7ff ffa2 	bl	80017e4 <SysTick_Config>
 80018a0:	4603      	mov	r3, r0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
	...

080018ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b086      	sub	sp, #24
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80018b8:	f7ff feda 	bl	8001670 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e099      	b.n	80019fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f022 0201 	bic.w	r2, r2, #1
 80018e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018e8:	e00f      	b.n	800190a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018ea:	f7ff fec1 	bl	8001670 <HAL_GetTick>
 80018ee:	4602      	mov	r2, r0
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	1ad3      	subs	r3, r2, r3
 80018f4:	2b05      	cmp	r3, #5
 80018f6:	d908      	bls.n	800190a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2203      	movs	r2, #3
 8001902:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e078      	b.n	80019fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0301 	and.w	r3, r3, #1
 8001914:	2b00      	cmp	r3, #0
 8001916:	d1e8      	bne.n	80018ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001920:	697a      	ldr	r2, [r7, #20]
 8001922:	4b38      	ldr	r3, [pc, #224]	; (8001a04 <HAL_DMA_Init+0x158>)
 8001924:	4013      	ands	r3, r2
 8001926:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685a      	ldr	r2, [r3, #4]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001936:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001942:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	699b      	ldr	r3, [r3, #24]
 8001948:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800194e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4313      	orrs	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001960:	2b04      	cmp	r3, #4
 8001962:	d107      	bne.n	8001974 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196c:	4313      	orrs	r3, r2
 800196e:	697a      	ldr	r2, [r7, #20]
 8001970:	4313      	orrs	r3, r2
 8001972:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	f023 0307 	bic.w	r3, r3, #7
 800198a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	4313      	orrs	r3, r2
 8001994:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	2b04      	cmp	r3, #4
 800199c:	d117      	bne.n	80019ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019a2:	697a      	ldr	r2, [r7, #20]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00e      	beq.n	80019ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 fa6f 	bl	8001e94 <DMA_CheckFifoParam>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d008      	beq.n	80019ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2240      	movs	r2, #64	; 0x40
 80019c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80019ca:	2301      	movs	r3, #1
 80019cc:	e016      	b.n	80019fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fa26 	bl	8001e28 <DMA_CalcBaseAndBitshift>
 80019dc:	4603      	mov	r3, r0
 80019de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e4:	223f      	movs	r2, #63	; 0x3f
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2200      	movs	r2, #0
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	f010803f 	.word	0xf010803f

08001a08 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b086      	sub	sp, #24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
 8001a14:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a16:	2300      	movs	r3, #0
 8001a18:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d101      	bne.n	8001a2e <HAL_DMA_Start_IT+0x26>
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	e040      	b.n	8001ab0 <HAL_DMA_Start_IT+0xa8>
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	2201      	movs	r2, #1
 8001a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d12f      	bne.n	8001aa2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2202      	movs	r2, #2
 8001a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	68b9      	ldr	r1, [r7, #8]
 8001a56:	68f8      	ldr	r0, [r7, #12]
 8001a58:	f000 f9b8 	bl	8001dcc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	223f      	movs	r2, #63	; 0x3f
 8001a62:	409a      	lsls	r2, r3
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f042 0216 	orr.w	r2, r2, #22
 8001a76:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0208 	orr.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f042 0201 	orr.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	e005      	b.n	8001aae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001aaa:	2302      	movs	r3, #2
 8001aac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001aae:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3718      	adds	r7, #24
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ac4:	4b92      	ldr	r3, [pc, #584]	; (8001d10 <HAL_DMA_IRQHandler+0x258>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a92      	ldr	r2, [pc, #584]	; (8001d14 <HAL_DMA_IRQHandler+0x25c>)
 8001aca:	fba2 2303 	umull	r2, r3, r2, r3
 8001ace:	0a9b      	lsrs	r3, r3, #10
 8001ad0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ad8:	693b      	ldr	r3, [r7, #16]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	4013      	ands	r3, r2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01a      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 0304 	and.w	r3, r3, #4
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d013      	beq.n	8001b24 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f022 0204 	bic.w	r2, r2, #4
 8001b0a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b10:	2208      	movs	r2, #8
 8001b12:	409a      	lsls	r2, r3
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1c:	f043 0201 	orr.w	r2, r3, #1
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	2201      	movs	r2, #1
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4013      	ands	r3, r2
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d012      	beq.n	8001b5a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	695b      	ldr	r3, [r3, #20]
 8001b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b46:	2201      	movs	r2, #1
 8001b48:	409a      	lsls	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b52:	f043 0202 	orr.w	r2, r3, #2
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5e:	2204      	movs	r2, #4
 8001b60:	409a      	lsls	r2, r3
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	4013      	ands	r3, r2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d012      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0302 	and.w	r3, r3, #2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d00b      	beq.n	8001b90 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b7c:	2204      	movs	r2, #4
 8001b7e:	409a      	lsls	r2, r3
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b88:	f043 0204 	orr.w	r2, r3, #4
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b94:	2210      	movs	r2, #16
 8001b96:	409a      	lsls	r2, r3
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d043      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d03c      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bb2:	2210      	movs	r2, #16
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d018      	beq.n	8001bfa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d108      	bne.n	8001be8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d024      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
 8001be6:	e01f      	b.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d01b      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	4798      	blx	r3
 8001bf8:	e016      	b.n	8001c28 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d107      	bne.n	8001c18 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 0208 	bic.w	r2, r2, #8
 8001c16:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c24:	6878      	ldr	r0, [r7, #4]
 8001c26:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	409a      	lsls	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4013      	ands	r3, r2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	f000 808e 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 0310 	and.w	r3, r3, #16
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	f000 8086 	beq.w	8001d56 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c4e:	2220      	movs	r2, #32
 8001c50:	409a      	lsls	r2, r3
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b05      	cmp	r3, #5
 8001c60:	d136      	bne.n	8001cd0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f022 0216 	bic.w	r2, r2, #22
 8001c70:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	695a      	ldr	r2, [r3, #20]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c80:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d103      	bne.n	8001c92 <HAL_DMA_IRQHandler+0x1da>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d007      	beq.n	8001ca2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f022 0208 	bic.w	r2, r2, #8
 8001ca0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	223f      	movs	r2, #63	; 0x3f
 8001ca8:	409a      	lsls	r2, r3
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2201      	movs	r2, #1
 8001cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d07d      	beq.n	8001dc2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	4798      	blx	r3
        }
        return;
 8001cce:	e078      	b.n	8001dc2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d01c      	beq.n	8001d18 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d108      	bne.n	8001cfe <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d030      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	4798      	blx	r3
 8001cfc:	e02b      	b.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d027      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	4798      	blx	r3
 8001d0e:	e022      	b.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
 8001d10:	20000004 	.word	0x20000004
 8001d14:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d10f      	bne.n	8001d46 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f022 0210 	bic.w	r2, r2, #16
 8001d34:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d003      	beq.n	8001d56 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d032      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d022      	beq.n	8001db0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f022 0201 	bic.w	r2, r2, #1
 8001d80:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3301      	adds	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
 8001d88:	697a      	ldr	r2, [r7, #20]
 8001d8a:	429a      	cmp	r2, r3
 8001d8c:	d307      	bcc.n	8001d9e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 0301 	and.w	r3, r3, #1
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f2      	bne.n	8001d82 <HAL_DMA_IRQHandler+0x2ca>
 8001d9c:	e000      	b.n	8001da0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001d9e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d005      	beq.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
 8001dc0:	e000      	b.n	8001dc4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001dc2:	bf00      	nop
    }
  }
}
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop

08001dcc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001de8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	2b40      	cmp	r3, #64	; 0x40
 8001df8:	d108      	bne.n	8001e0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	687a      	ldr	r2, [r7, #4]
 8001e00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e0a:	e007      	b.n	8001e1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68ba      	ldr	r2, [r7, #8]
 8001e12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	687a      	ldr	r2, [r7, #4]
 8001e1a:	60da      	str	r2, [r3, #12]
}
 8001e1c:	bf00      	nop
 8001e1e:	3714      	adds	r7, #20
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	3b10      	subs	r3, #16
 8001e38:	4a14      	ldr	r2, [pc, #80]	; (8001e8c <DMA_CalcBaseAndBitshift+0x64>)
 8001e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001e42:	4a13      	ldr	r2, [pc, #76]	; (8001e90 <DMA_CalcBaseAndBitshift+0x68>)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4413      	add	r3, r2
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	2b03      	cmp	r3, #3
 8001e54:	d909      	bls.n	8001e6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e5e:	f023 0303 	bic.w	r3, r3, #3
 8001e62:	1d1a      	adds	r2, r3, #4
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	659a      	str	r2, [r3, #88]	; 0x58
 8001e68:	e007      	b.n	8001e7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001e72:	f023 0303 	bic.w	r3, r3, #3
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3714      	adds	r7, #20
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	aaaaaaab 	.word	0xaaaaaaab
 8001e90:	0800437c 	.word	0x0800437c

08001e94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d11f      	bne.n	8001eee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	2b03      	cmp	r3, #3
 8001eb2:	d855      	bhi.n	8001f60 <DMA_CheckFifoParam+0xcc>
 8001eb4:	a201      	add	r2, pc, #4	; (adr r2, 8001ebc <DMA_CheckFifoParam+0x28>)
 8001eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eba:	bf00      	nop
 8001ebc:	08001ecd 	.word	0x08001ecd
 8001ec0:	08001edf 	.word	0x08001edf
 8001ec4:	08001ecd 	.word	0x08001ecd
 8001ec8:	08001f61 	.word	0x08001f61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d045      	beq.n	8001f64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001edc:	e042      	b.n	8001f64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001ee6:	d13f      	bne.n	8001f68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001eec:	e03c      	b.n	8001f68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ef6:	d121      	bne.n	8001f3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d836      	bhi.n	8001f6c <DMA_CheckFifoParam+0xd8>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <DMA_CheckFifoParam+0x70>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1b 	.word	0x08001f1b
 8001f0c:	08001f15 	.word	0x08001f15
 8001f10:	08001f2d 	.word	0x08001f2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	73fb      	strb	r3, [r7, #15]
      break;
 8001f18:	e02f      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d024      	beq.n	8001f70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f2a:	e021      	b.n	8001f70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f34:	d11e      	bne.n	8001f74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001f3a:	e01b      	b.n	8001f74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001f3c:	68bb      	ldr	r3, [r7, #8]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d902      	bls.n	8001f48 <DMA_CheckFifoParam+0xb4>
 8001f42:	2b03      	cmp	r3, #3
 8001f44:	d003      	beq.n	8001f4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001f46:	e018      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001f4c:	e015      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00e      	beq.n	8001f78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001f5e:	e00b      	b.n	8001f78 <DMA_CheckFifoParam+0xe4>
      break;
 8001f60:	bf00      	nop
 8001f62:	e00a      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f64:	bf00      	nop
 8001f66:	e008      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f68:	bf00      	nop
 8001f6a:	e006      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f6c:	bf00      	nop
 8001f6e:	e004      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f70:	bf00      	nop
 8001f72:	e002      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;   
 8001f74:	bf00      	nop
 8001f76:	e000      	b.n	8001f7a <DMA_CheckFifoParam+0xe6>
      break;
 8001f78:	bf00      	nop
    }
  } 
  
  return status; 
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3714      	adds	r7, #20
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
 8001fa2:	e159      	b.n	8002258 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	697a      	ldr	r2, [r7, #20]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fb8:	693a      	ldr	r2, [r7, #16]
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	f040 8148 	bne.w	8002252 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d00b      	beq.n	8001fe2 <HAL_GPIO_Init+0x5a>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	2b02      	cmp	r3, #2
 8001fd0:	d007      	beq.n	8001fe2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001fd6:	2b11      	cmp	r3, #17
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d130      	bne.n	8002044 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	2203      	movs	r2, #3
 8001fee:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	fa02 f303 	lsl.w	r3, r2, r3
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002018:	2201      	movs	r2, #1
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	69ba      	ldr	r2, [r7, #24]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	091b      	lsrs	r3, r3, #4
 800202e:	f003 0201 	and.w	r2, r3, #1
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	4313      	orrs	r3, r2
 800203c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	2203      	movs	r2, #3
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	689a      	ldr	r2, [r3, #8]
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	005b      	lsls	r3, r3, #1
 8002064:	fa02 f303 	lsl.w	r3, r2, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4313      	orrs	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69ba      	ldr	r2, [r7, #24]
 8002072:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	2b02      	cmp	r3, #2
 800207a:	d003      	beq.n	8002084 <HAL_GPIO_Init+0xfc>
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	2b12      	cmp	r3, #18
 8002082:	d123      	bne.n	80020cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002084:	69fb      	ldr	r3, [r7, #28]
 8002086:	08da      	lsrs	r2, r3, #3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3208      	adds	r2, #8
 800208c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002090:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	220f      	movs	r2, #15
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	691a      	ldr	r2, [r3, #16]
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	08da      	lsrs	r2, r3, #3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	3208      	adds	r2, #8
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	2203      	movs	r2, #3
 80020d8:	fa02 f303 	lsl.w	r3, r2, r3
 80020dc:	43db      	mvns	r3, r3
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	4013      	ands	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80a2 	beq.w	8002252 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60fb      	str	r3, [r7, #12]
 8002112:	4b56      	ldr	r3, [pc, #344]	; (800226c <HAL_GPIO_Init+0x2e4>)
 8002114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002116:	4a55      	ldr	r2, [pc, #340]	; (800226c <HAL_GPIO_Init+0x2e4>)
 8002118:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800211c:	6453      	str	r3, [r2, #68]	; 0x44
 800211e:	4b53      	ldr	r3, [pc, #332]	; (800226c <HAL_GPIO_Init+0x2e4>)
 8002120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002122:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212a:	4a51      	ldr	r2, [pc, #324]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a48      	ldr	r2, [pc, #288]	; (8002274 <HAL_GPIO_Init+0x2ec>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d019      	beq.n	800218a <HAL_GPIO_Init+0x202>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a47      	ldr	r2, [pc, #284]	; (8002278 <HAL_GPIO_Init+0x2f0>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d013      	beq.n	8002186 <HAL_GPIO_Init+0x1fe>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a46      	ldr	r2, [pc, #280]	; (800227c <HAL_GPIO_Init+0x2f4>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00d      	beq.n	8002182 <HAL_GPIO_Init+0x1fa>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a45      	ldr	r2, [pc, #276]	; (8002280 <HAL_GPIO_Init+0x2f8>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d007      	beq.n	800217e <HAL_GPIO_Init+0x1f6>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a44      	ldr	r2, [pc, #272]	; (8002284 <HAL_GPIO_Init+0x2fc>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d101      	bne.n	800217a <HAL_GPIO_Init+0x1f2>
 8002176:	2304      	movs	r3, #4
 8002178:	e008      	b.n	800218c <HAL_GPIO_Init+0x204>
 800217a:	2307      	movs	r3, #7
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x204>
 800217e:	2303      	movs	r3, #3
 8002180:	e004      	b.n	800218c <HAL_GPIO_Init+0x204>
 8002182:	2302      	movs	r3, #2
 8002184:	e002      	b.n	800218c <HAL_GPIO_Init+0x204>
 8002186:	2301      	movs	r3, #1
 8002188:	e000      	b.n	800218c <HAL_GPIO_Init+0x204>
 800218a:	2300      	movs	r3, #0
 800218c:	69fa      	ldr	r2, [r7, #28]
 800218e:	f002 0203 	and.w	r2, r2, #3
 8002192:	0092      	lsls	r2, r2, #2
 8002194:	4093      	lsls	r3, r2
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800219c:	4934      	ldr	r1, [pc, #208]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	089b      	lsrs	r3, r3, #2
 80021a2:	3302      	adds	r3, #2
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021aa:	4b37      	ldr	r3, [pc, #220]	; (8002288 <HAL_GPIO_Init+0x300>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021ce:	4a2e      	ldr	r2, [pc, #184]	; (8002288 <HAL_GPIO_Init+0x300>)
 80021d0:	69bb      	ldr	r3, [r7, #24]
 80021d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021d4:	4b2c      	ldr	r3, [pc, #176]	; (8002288 <HAL_GPIO_Init+0x300>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	43db      	mvns	r3, r3
 80021de:	69ba      	ldr	r2, [r7, #24]
 80021e0:	4013      	ands	r3, r2
 80021e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021f8:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_GPIO_Init+0x300>)
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b22      	ldr	r3, [pc, #136]	; (8002288 <HAL_GPIO_Init+0x300>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_GPIO_Init+0x300>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_GPIO_Init+0x300>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a0e      	ldr	r2, [pc, #56]	; (8002288 <HAL_GPIO_Init+0x300>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	3301      	adds	r3, #1
 8002256:	61fb      	str	r3, [r7, #28]
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	2b0f      	cmp	r3, #15
 800225c:	f67f aea2 	bls.w	8001fa4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002260:	bf00      	nop
 8002262:	3724      	adds	r7, #36	; 0x24
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	40023800 	.word	0x40023800
 8002270:	40013800 	.word	0x40013800
 8002274:	40020000 	.word	0x40020000
 8002278:	40020400 	.word	0x40020400
 800227c:	40020800 	.word	0x40020800
 8002280:	40020c00 	.word	0x40020c00
 8002284:	40021000 	.word	0x40021000
 8002288:	40013c00 	.word	0x40013c00

0800228c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800228c:	b480      	push	{r7}
 800228e:	b083      	sub	sp, #12
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	460b      	mov	r3, r1
 8002296:	807b      	strh	r3, [r7, #2]
 8002298:	4613      	mov	r3, r2
 800229a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800229c:	787b      	ldrb	r3, [r7, #1]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022a2:	887a      	ldrh	r2, [r7, #2]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a8:	e003      	b.n	80022b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022aa:	887b      	ldrh	r3, [r7, #2]
 80022ac:	041a      	lsls	r2, r3, #16
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	619a      	str	r2, [r3, #24]
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
 80022c6:	460b      	mov	r3, r1
 80022c8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	887b      	ldrh	r3, [r7, #2]
 80022d0:	401a      	ands	r2, r3
 80022d2:	887b      	ldrh	r3, [r7, #2]
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d104      	bne.n	80022e2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80022d8:	887b      	ldrh	r3, [r7, #2]
 80022da:	041a      	lsls	r2, r3, #16
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e25b      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d075      	beq.n	80023fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002312:	4ba3      	ldr	r3, [pc, #652]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002314:	689b      	ldr	r3, [r3, #8]
 8002316:	f003 030c 	and.w	r3, r3, #12
 800231a:	2b04      	cmp	r3, #4
 800231c:	d00c      	beq.n	8002338 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800231e:	4ba0      	ldr	r3, [pc, #640]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002326:	2b08      	cmp	r3, #8
 8002328:	d112      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800232a:	4b9d      	ldr	r3, [pc, #628]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002332:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002336:	d10b      	bne.n	8002350 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002338:	4b99      	ldr	r3, [pc, #612]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d05b      	beq.n	80023fc <HAL_RCC_OscConfig+0x108>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d157      	bne.n	80023fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e236      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002358:	d106      	bne.n	8002368 <HAL_RCC_OscConfig+0x74>
 800235a:	4b91      	ldr	r3, [pc, #580]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a90      	ldr	r2, [pc, #576]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002360:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002364:	6013      	str	r3, [r2, #0]
 8002366:	e01d      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002370:	d10c      	bne.n	800238c <HAL_RCC_OscConfig+0x98>
 8002372:	4b8b      	ldr	r3, [pc, #556]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a8a      	ldr	r2, [pc, #552]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	4b88      	ldr	r3, [pc, #544]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a87      	ldr	r2, [pc, #540]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]
 800238a:	e00b      	b.n	80023a4 <HAL_RCC_OscConfig+0xb0>
 800238c:	4b84      	ldr	r3, [pc, #528]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a83      	ldr	r2, [pc, #524]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	6013      	str	r3, [r2, #0]
 8002398:	4b81      	ldr	r3, [pc, #516]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a80      	ldr	r2, [pc, #512]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d013      	beq.n	80023d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ac:	f7ff f960 	bl	8001670 <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023b4:	f7ff f95c 	bl	8001670 <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b64      	cmp	r3, #100	; 0x64
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1fb      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023c6:	4b76      	ldr	r3, [pc, #472]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0xc0>
 80023d2:	e014      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023d4:	f7ff f94c 	bl	8001670 <HAL_GetTick>
 80023d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023da:	e008      	b.n	80023ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023dc:	f7ff f948 	bl	8001670 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b64      	cmp	r3, #100	; 0x64
 80023e8:	d901      	bls.n	80023ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023ea:	2303      	movs	r3, #3
 80023ec:	e1e7      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ee:	4b6c      	ldr	r3, [pc, #432]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1f0      	bne.n	80023dc <HAL_RCC_OscConfig+0xe8>
 80023fa:	e000      	b.n	80023fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d063      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800240a:	4b65      	ldr	r3, [pc, #404]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	689b      	ldr	r3, [r3, #8]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00b      	beq.n	800242e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002416:	4b62      	ldr	r3, [pc, #392]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800241e:	2b08      	cmp	r3, #8
 8002420:	d11c      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002422:	4b5f      	ldr	r3, [pc, #380]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d116      	bne.n	800245c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b5c      	ldr	r3, [pc, #368]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d005      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d001      	beq.n	8002446 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e1bb      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002446:	4b56      	ldr	r3, [pc, #344]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	00db      	lsls	r3, r3, #3
 8002454:	4952      	ldr	r1, [pc, #328]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002456:	4313      	orrs	r3, r2
 8002458:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800245a:	e03a      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d020      	beq.n	80024a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002464:	4b4f      	ldr	r3, [pc, #316]	; (80025a4 <HAL_RCC_OscConfig+0x2b0>)
 8002466:	2201      	movs	r2, #1
 8002468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800246a:	f7ff f901 	bl	8001670 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002470:	e008      	b.n	8002484 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002472:	f7ff f8fd 	bl	8001670 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e19c      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002484:	4b46      	ldr	r3, [pc, #280]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d0f0      	beq.n	8002472 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b43      	ldr	r3, [pc, #268]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	4940      	ldr	r1, [pc, #256]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	600b      	str	r3, [r1, #0]
 80024a4:	e015      	b.n	80024d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <HAL_RCC_OscConfig+0x2b0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ac:	f7ff f8e0 	bl	8001670 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024b4:	f7ff f8dc 	bl	8001670 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e17b      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024c6:	4b36      	ldr	r3, [pc, #216]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0308 	and.w	r3, r3, #8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d030      	beq.n	8002540 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d016      	beq.n	8002514 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024e6:	4b30      	ldr	r3, [pc, #192]	; (80025a8 <HAL_RCC_OscConfig+0x2b4>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ec:	f7ff f8c0 	bl	8001670 <HAL_GetTick>
 80024f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024f2:	e008      	b.n	8002506 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024f4:	f7ff f8bc 	bl	8001670 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	693b      	ldr	r3, [r7, #16]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d901      	bls.n	8002506 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002502:	2303      	movs	r3, #3
 8002504:	e15b      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002506:	4b26      	ldr	r3, [pc, #152]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002508:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d0f0      	beq.n	80024f4 <HAL_RCC_OscConfig+0x200>
 8002512:	e015      	b.n	8002540 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002514:	4b24      	ldr	r3, [pc, #144]	; (80025a8 <HAL_RCC_OscConfig+0x2b4>)
 8002516:	2200      	movs	r2, #0
 8002518:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800251a:	f7ff f8a9 	bl	8001670 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002522:	f7ff f8a5 	bl	8001670 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e144      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002534:	4b1a      	ldr	r3, [pc, #104]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d1f0      	bne.n	8002522 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0304 	and.w	r3, r3, #4
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80a0 	beq.w	800268e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800254e:	2300      	movs	r3, #0
 8002550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002552:	4b13      	ldr	r3, [pc, #76]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10f      	bne.n	800257e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800255e:	2300      	movs	r3, #0
 8002560:	60bb      	str	r3, [r7, #8]
 8002562:	4b0f      	ldr	r3, [pc, #60]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002566:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800256c:	6413      	str	r3, [r2, #64]	; 0x40
 800256e:	4b0c      	ldr	r3, [pc, #48]	; (80025a0 <HAL_RCC_OscConfig+0x2ac>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002576:	60bb      	str	r3, [r7, #8]
 8002578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257a:	2301      	movs	r3, #1
 800257c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <HAL_RCC_OscConfig+0x2b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002586:	2b00      	cmp	r3, #0
 8002588:	d121      	bne.n	80025ce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258a:	4b08      	ldr	r3, [pc, #32]	; (80025ac <HAL_RCC_OscConfig+0x2b8>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a07      	ldr	r2, [pc, #28]	; (80025ac <HAL_RCC_OscConfig+0x2b8>)
 8002590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002596:	f7ff f86b 	bl	8001670 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800259c:	e011      	b.n	80025c2 <HAL_RCC_OscConfig+0x2ce>
 800259e:	bf00      	nop
 80025a0:	40023800 	.word	0x40023800
 80025a4:	42470000 	.word	0x42470000
 80025a8:	42470e80 	.word	0x42470e80
 80025ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025b0:	f7ff f85e 	bl	8001670 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d901      	bls.n	80025c2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80025be:	2303      	movs	r3, #3
 80025c0:	e0fd      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025c2:	4b81      	ldr	r3, [pc, #516]	; (80027c8 <HAL_RCC_OscConfig+0x4d4>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d0f0      	beq.n	80025b0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	689b      	ldr	r3, [r3, #8]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d106      	bne.n	80025e4 <HAL_RCC_OscConfig+0x2f0>
 80025d6:	4b7d      	ldr	r3, [pc, #500]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80025d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025da:	4a7c      	ldr	r2, [pc, #496]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6713      	str	r3, [r2, #112]	; 0x70
 80025e2:	e01c      	b.n	800261e <HAL_RCC_OscConfig+0x32a>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	2b05      	cmp	r3, #5
 80025ea:	d10c      	bne.n	8002606 <HAL_RCC_OscConfig+0x312>
 80025ec:	4b77      	ldr	r3, [pc, #476]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80025ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f0:	4a76      	ldr	r2, [pc, #472]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80025f2:	f043 0304 	orr.w	r3, r3, #4
 80025f6:	6713      	str	r3, [r2, #112]	; 0x70
 80025f8:	4b74      	ldr	r3, [pc, #464]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	4a73      	ldr	r2, [pc, #460]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	; 0x70
 8002604:	e00b      	b.n	800261e <HAL_RCC_OscConfig+0x32a>
 8002606:	4b71      	ldr	r3, [pc, #452]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260a:	4a70      	ldr	r2, [pc, #448]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 800260c:	f023 0301 	bic.w	r3, r3, #1
 8002610:	6713      	str	r3, [r2, #112]	; 0x70
 8002612:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	4a6d      	ldr	r2, [pc, #436]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002618:	f023 0304 	bic.w	r3, r3, #4
 800261c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d015      	beq.n	8002652 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002626:	f7ff f823 	bl	8001670 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	e00a      	b.n	8002644 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800262e:	f7ff f81f 	bl	8001670 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f241 3288 	movw	r2, #5000	; 0x1388
 800263c:	4293      	cmp	r3, r2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e0bc      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002644:	4b61      	ldr	r3, [pc, #388]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0ee      	beq.n	800262e <HAL_RCC_OscConfig+0x33a>
 8002650:	e014      	b.n	800267c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002652:	f7ff f80d 	bl	8001670 <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800265a:	f7ff f809 	bl	8001670 <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	f241 3288 	movw	r2, #5000	; 0x1388
 8002668:	4293      	cmp	r3, r2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0a6      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002670:	4b56      	ldr	r3, [pc, #344]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002672:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1ee      	bne.n	800265a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267c:	7dfb      	ldrb	r3, [r7, #23]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d105      	bne.n	800268e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002682:	4b52      	ldr	r3, [pc, #328]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	4a51      	ldr	r2, [pc, #324]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8092 	beq.w	80027bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002698:	4b4c      	ldr	r3, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 030c 	and.w	r3, r3, #12
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d05c      	beq.n	800275e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d141      	bne.n	8002730 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ac:	4b48      	ldr	r3, [pc, #288]	; (80027d0 <HAL_RCC_OscConfig+0x4dc>)
 80026ae:	2200      	movs	r2, #0
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7fe ffdd 	bl	8001670 <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ba:	f7fe ffd9 	bl	8001670 <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e078      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f0      	bne.n	80026ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69da      	ldr	r2, [r3, #28]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026e6:	019b      	lsls	r3, r3, #6
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ee:	085b      	lsrs	r3, r3, #1
 80026f0:	3b01      	subs	r3, #1
 80026f2:	041b      	lsls	r3, r3, #16
 80026f4:	431a      	orrs	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fa:	061b      	lsls	r3, r3, #24
 80026fc:	4933      	ldr	r1, [pc, #204]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002702:	4b33      	ldr	r3, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x4dc>)
 8002704:	2201      	movs	r2, #1
 8002706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe ffb2 	bl	8001670 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002710:	f7fe ffae 	bl	8001670 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b02      	cmp	r3, #2
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e04d      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002722:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x41c>
 800272e:	e045      	b.n	80027bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002730:	4b27      	ldr	r3, [pc, #156]	; (80027d0 <HAL_RCC_OscConfig+0x4dc>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002736:	f7fe ff9b 	bl	8001670 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800273e:	f7fe ff97 	bl	8001670 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e036      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002750:	4b1e      	ldr	r3, [pc, #120]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x44a>
 800275c:	e02e      	b.n	80027bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699b      	ldr	r3, [r3, #24]
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e029      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800276a:	4b18      	ldr	r3, [pc, #96]	; (80027cc <HAL_RCC_OscConfig+0x4d8>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	429a      	cmp	r2, r3
 800277c:	d11c      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d115      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002792:	4013      	ands	r3, r2
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002798:	4293      	cmp	r3, r2
 800279a:	d10d      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d106      	bne.n	80027b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d001      	beq.n	80027bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e000      	b.n	80027be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	40007000 	.word	0x40007000
 80027cc:	40023800 	.word	0x40023800
 80027d0:	42470060 	.word	0x42470060

080027d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d101      	bne.n	80027e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	e0cc      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027e8:	4b68      	ldr	r3, [pc, #416]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d90c      	bls.n	8002810 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b65      	ldr	r3, [pc, #404]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	b2d2      	uxtb	r2, r2
 80027fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fe:	4b63      	ldr	r3, [pc, #396]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 030f 	and.w	r3, r3, #15
 8002806:	683a      	ldr	r2, [r7, #0]
 8002808:	429a      	cmp	r2, r3
 800280a:	d001      	beq.n	8002810 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0b8      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 0302 	and.w	r3, r3, #2
 8002818:	2b00      	cmp	r3, #0
 800281a:	d020      	beq.n	800285e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0304 	and.w	r3, r3, #4
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002828:	4b59      	ldr	r3, [pc, #356]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	4a58      	ldr	r2, [pc, #352]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800282e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002832:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d005      	beq.n	800284c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002840:	4b53      	ldr	r3, [pc, #332]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002842:	689b      	ldr	r3, [r3, #8]
 8002844:	4a52      	ldr	r2, [pc, #328]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002846:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800284a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800284c:	4b50      	ldr	r3, [pc, #320]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	494d      	ldr	r1, [pc, #308]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d044      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d107      	bne.n	8002882 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b47      	ldr	r3, [pc, #284]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d119      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e07f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d003      	beq.n	8002892 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288e:	2b03      	cmp	r3, #3
 8002890:	d107      	bne.n	80028a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002892:	4b3f      	ldr	r3, [pc, #252]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800289a:	2b00      	cmp	r3, #0
 800289c:	d109      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e06f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028a2:	4b3b      	ldr	r3, [pc, #236]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d101      	bne.n	80028b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e067      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f023 0203 	bic.w	r2, r3, #3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4934      	ldr	r1, [pc, #208]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028c4:	f7fe fed4 	bl	8001670 <HAL_GetTick>
 80028c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028cc:	f7fe fed0 	bl	8001670 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e04f      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 020c 	and.w	r2, r3, #12
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d1eb      	bne.n	80028cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028f4:	4b25      	ldr	r3, [pc, #148]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 030f 	and.w	r3, r3, #15
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	429a      	cmp	r2, r3
 8002900:	d20c      	bcs.n	800291c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002902:	4b22      	ldr	r3, [pc, #136]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	b2d2      	uxtb	r2, r2
 8002908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	4b20      	ldr	r3, [pc, #128]	; (800298c <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 030f 	and.w	r3, r3, #15
 8002912:	683a      	ldr	r2, [r7, #0]
 8002914:	429a      	cmp	r2, r3
 8002916:	d001      	beq.n	800291c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e032      	b.n	8002982 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 0304 	and.w	r3, r3, #4
 8002924:	2b00      	cmp	r3, #0
 8002926:	d008      	beq.n	800293a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002928:	4b19      	ldr	r3, [pc, #100]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	4916      	ldr	r1, [pc, #88]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0308 	and.w	r3, r3, #8
 8002942:	2b00      	cmp	r3, #0
 8002944:	d009      	beq.n	800295a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002946:	4b12      	ldr	r3, [pc, #72]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	691b      	ldr	r3, [r3, #16]
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	490e      	ldr	r1, [pc, #56]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	4313      	orrs	r3, r2
 8002958:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800295a:	f000 f821 	bl	80029a0 <HAL_RCC_GetSysClockFreq>
 800295e:	4601      	mov	r1, r0
 8002960:	4b0b      	ldr	r3, [pc, #44]	; (8002990 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	091b      	lsrs	r3, r3, #4
 8002966:	f003 030f 	and.w	r3, r3, #15
 800296a:	4a0a      	ldr	r2, [pc, #40]	; (8002994 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	5cd3      	ldrb	r3, [r2, r3]
 800296e:	fa21 f303 	lsr.w	r3, r1, r3
 8002972:	4a09      	ldr	r2, [pc, #36]	; (8002998 <HAL_RCC_ClockConfig+0x1c4>)
 8002974:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002976:	4b09      	ldr	r3, [pc, #36]	; (800299c <HAL_RCC_ClockConfig+0x1c8>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4618      	mov	r0, r3
 800297c:	f7fe fe34 	bl	80015e8 <HAL_InitTick>

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	40023c00 	.word	0x40023c00
 8002990:	40023800 	.word	0x40023800
 8002994:	08004364 	.word	0x08004364
 8002998:	20000004 	.word	0x20000004
 800299c:	20000008 	.word	0x20000008

080029a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029a2:	b085      	sub	sp, #20
 80029a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	607b      	str	r3, [r7, #4]
 80029aa:	2300      	movs	r3, #0
 80029ac:	60fb      	str	r3, [r7, #12]
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029b6:	4b63      	ldr	r3, [pc, #396]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 030c 	and.w	r3, r3, #12
 80029be:	2b04      	cmp	r3, #4
 80029c0:	d007      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x32>
 80029c2:	2b08      	cmp	r3, #8
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_GetSysClockFreq+0x38>
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f040 80b4 	bne.w	8002b34 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029cc:	4b5e      	ldr	r3, [pc, #376]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80029ce:	60bb      	str	r3, [r7, #8]
       break;
 80029d0:	e0b3      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029d2:	4b5e      	ldr	r3, [pc, #376]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80029d4:	60bb      	str	r3, [r7, #8]
      break;
 80029d6:	e0b0      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029d8:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029e2:	4b58      	ldr	r3, [pc, #352]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d04a      	beq.n	8002a84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ee:	4b55      	ldr	r3, [pc, #340]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	099b      	lsrs	r3, r3, #6
 80029f4:	f04f 0400 	mov.w	r4, #0
 80029f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	ea03 0501 	and.w	r5, r3, r1
 8002a04:	ea04 0602 	and.w	r6, r4, r2
 8002a08:	4629      	mov	r1, r5
 8002a0a:	4632      	mov	r2, r6
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	f04f 0400 	mov.w	r4, #0
 8002a14:	0154      	lsls	r4, r2, #5
 8002a16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002a1a:	014b      	lsls	r3, r1, #5
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4622      	mov	r2, r4
 8002a20:	1b49      	subs	r1, r1, r5
 8002a22:	eb62 0206 	sbc.w	r2, r2, r6
 8002a26:	f04f 0300 	mov.w	r3, #0
 8002a2a:	f04f 0400 	mov.w	r4, #0
 8002a2e:	0194      	lsls	r4, r2, #6
 8002a30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002a34:	018b      	lsls	r3, r1, #6
 8002a36:	1a5b      	subs	r3, r3, r1
 8002a38:	eb64 0402 	sbc.w	r4, r4, r2
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	f04f 0200 	mov.w	r2, #0
 8002a44:	00e2      	lsls	r2, r4, #3
 8002a46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002a4a:	00d9      	lsls	r1, r3, #3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4614      	mov	r4, r2
 8002a50:	195b      	adds	r3, r3, r5
 8002a52:	eb44 0406 	adc.w	r4, r4, r6
 8002a56:	f04f 0100 	mov.w	r1, #0
 8002a5a:	f04f 0200 	mov.w	r2, #0
 8002a5e:	0262      	lsls	r2, r4, #9
 8002a60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002a64:	0259      	lsls	r1, r3, #9
 8002a66:	460b      	mov	r3, r1
 8002a68:	4614      	mov	r4, r2
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	4621      	mov	r1, r4
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f04f 0400 	mov.w	r4, #0
 8002a74:	461a      	mov	r2, r3
 8002a76:	4623      	mov	r3, r4
 8002a78:	f7fd ffa4 	bl	80009c4 <__aeabi_uldivmod>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	460c      	mov	r4, r1
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	e049      	b.n	8002b18 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a84:	4b2f      	ldr	r3, [pc, #188]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	099b      	lsrs	r3, r3, #6
 8002a8a:	f04f 0400 	mov.w	r4, #0
 8002a8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	ea03 0501 	and.w	r5, r3, r1
 8002a9a:	ea04 0602 	and.w	r6, r4, r2
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	4632      	mov	r2, r6
 8002aa2:	f04f 0300 	mov.w	r3, #0
 8002aa6:	f04f 0400 	mov.w	r4, #0
 8002aaa:	0154      	lsls	r4, r2, #5
 8002aac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ab0:	014b      	lsls	r3, r1, #5
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	4622      	mov	r2, r4
 8002ab6:	1b49      	subs	r1, r1, r5
 8002ab8:	eb62 0206 	sbc.w	r2, r2, r6
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	f04f 0400 	mov.w	r4, #0
 8002ac4:	0194      	lsls	r4, r2, #6
 8002ac6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002aca:	018b      	lsls	r3, r1, #6
 8002acc:	1a5b      	subs	r3, r3, r1
 8002ace:	eb64 0402 	sbc.w	r4, r4, r2
 8002ad2:	f04f 0100 	mov.w	r1, #0
 8002ad6:	f04f 0200 	mov.w	r2, #0
 8002ada:	00e2      	lsls	r2, r4, #3
 8002adc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002ae0:	00d9      	lsls	r1, r3, #3
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4614      	mov	r4, r2
 8002ae6:	195b      	adds	r3, r3, r5
 8002ae8:	eb44 0406 	adc.w	r4, r4, r6
 8002aec:	f04f 0100 	mov.w	r1, #0
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	02a2      	lsls	r2, r4, #10
 8002af6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002afa:	0299      	lsls	r1, r3, #10
 8002afc:	460b      	mov	r3, r1
 8002afe:	4614      	mov	r4, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	4621      	mov	r1, r4
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f04f 0400 	mov.w	r4, #0
 8002b0a:	461a      	mov	r2, r3
 8002b0c:	4623      	mov	r3, r4
 8002b0e:	f7fd ff59 	bl	80009c4 <__aeabi_uldivmod>
 8002b12:	4603      	mov	r3, r0
 8002b14:	460c      	mov	r4, r1
 8002b16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b18:	4b0a      	ldr	r3, [pc, #40]	; (8002b44 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	0c1b      	lsrs	r3, r3, #16
 8002b1e:	f003 0303 	and.w	r3, r3, #3
 8002b22:	3301      	adds	r3, #1
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b28:	68fa      	ldr	r2, [r7, #12]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b30:	60bb      	str	r3, [r7, #8]
      break;
 8002b32:	e002      	b.n	8002b3a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002b36:	60bb      	str	r3, [r7, #8]
      break;
 8002b38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
}
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	3714      	adds	r7, #20
 8002b40:	46bd      	mov	sp, r7
 8002b42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400
 8002b4c:	007a1200 	.word	0x007a1200

08002b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b54:	4b03      	ldr	r3, [pc, #12]	; (8002b64 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b56:	681b      	ldr	r3, [r3, #0]
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	20000004 	.word	0x20000004

08002b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b6c:	f7ff fff0 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b05      	ldr	r3, [pc, #20]	; (8002b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0a9b      	lsrs	r3, r3, #10
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4a03      	ldr	r2, [pc, #12]	; (8002b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40023800 	.word	0x40023800
 8002b8c:	08004374 	.word	0x08004374

08002b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b94:	f7ff ffdc 	bl	8002b50 <HAL_RCC_GetHCLKFreq>
 8002b98:	4601      	mov	r1, r0
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	0b5b      	lsrs	r3, r3, #13
 8002ba0:	f003 0307 	and.w	r3, r3, #7
 8002ba4:	4a03      	ldr	r2, [pc, #12]	; (8002bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ba6:	5cd3      	ldrb	r3, [r2, r3]
 8002ba8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40023800 	.word	0x40023800
 8002bb4:	08004374 	.word	0x08004374

08002bb8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b082      	sub	sp, #8
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d101      	bne.n	8002bca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e01d      	b.n	8002c06 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bd0:	b2db      	uxtb	r3, r3
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d106      	bne.n	8002be4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7fe fb66 	bl	80012b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4610      	mov	r0, r2
 8002bf8:	f000 fcd2 	bl	80035a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b085      	sub	sp, #20
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2202      	movs	r2, #2
 8002c1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0307 	and.w	r3, r3, #7
 8002c28:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2b06      	cmp	r3, #6
 8002c2e:	d007      	beq.n	8002c40 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b085      	sub	sp, #20
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	68da      	ldr	r2, [r3, #12]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0307 	and.w	r3, r3, #7
 8002c78:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2b06      	cmp	r3, #6
 8002c7e:	d007      	beq.n	8002c90 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f042 0201 	orr.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b082      	sub	sp, #8
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d101      	bne.n	8002cb0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e01d      	b.n	8002cec <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cb6:	b2db      	uxtb	r3, r3
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d106      	bne.n	8002cca <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002cc4:	6878      	ldr	r0, [r7, #4]
 8002cc6:	f000 f815 	bl	8002cf4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2202      	movs	r2, #2
 8002cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	4619      	mov	r1, r3
 8002cdc:	4610      	mov	r0, r2
 8002cde:	f000 fc5f 	bl	80035a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cea:	2300      	movs	r3, #0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002cfc:	bf00      	nop
 8002cfe:	370c      	adds	r7, #12
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr

08002d08 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
 8002d14:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_IC_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0dc      	b.n	8002ee0 <HAL_TIM_IC_Start_DMA+0x1d8>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d10b      	bne.n	8002d4a <HAL_TIM_IC_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <HAL_TIM_IC_Start_DMA+0x3a>
 8002d38:	887b      	ldrh	r3, [r7, #2]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_TIM_IC_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0ce      	b.n	8002ee0 <HAL_TIM_IC_Start_DMA+0x1d8>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2202      	movs	r2, #2
 8002d46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	2b0c      	cmp	r3, #12
 8002d4e:	f200 80ad 	bhi.w	8002eac <HAL_TIM_IC_Start_DMA+0x1a4>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <HAL_TIM_IC_Start_DMA+0x50>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d8d 	.word	0x08002d8d
 8002d5c:	08002ead 	.word	0x08002ead
 8002d60:	08002ead 	.word	0x08002ead
 8002d64:	08002ead 	.word	0x08002ead
 8002d68:	08002dd5 	.word	0x08002dd5
 8002d6c:	08002ead 	.word	0x08002ead
 8002d70:	08002ead 	.word	0x08002ead
 8002d74:	08002ead 	.word	0x08002ead
 8002d78:	08002e1d 	.word	0x08002e1d
 8002d7c:	08002ead 	.word	0x08002ead
 8002d80:	08002ead 	.word	0x08002ead
 8002d84:	08002ead 	.word	0x08002ead
 8002d88:	08002e65 	.word	0x08002e65
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	4a55      	ldr	r2, [pc, #340]	; (8002ee8 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002d92:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	4a54      	ldr	r2, [pc, #336]	; (8002eec <HAL_TIM_IC_Start_DMA+0x1e4>)
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	4a53      	ldr	r2, [pc, #332]	; (8002ef0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8002da2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	3334      	adds	r3, #52	; 0x34
 8002dae:	4619      	mov	r1, r3
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	887b      	ldrh	r3, [r7, #2]
 8002db4:	f7fe fe28 	bl	8001a08 <HAL_DMA_Start_IT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d001      	beq.n	8002dc2 <HAL_TIM_IC_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	e08e      	b.n	8002ee0 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68da      	ldr	r2, [r3, #12]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd0:	60da      	str	r2, [r3, #12]
      break;
 8002dd2:	e06c      	b.n	8002eae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dd8:	4a43      	ldr	r2, [pc, #268]	; (8002ee8 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002dda:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	4a42      	ldr	r2, [pc, #264]	; (8002eec <HAL_TIM_IC_Start_DMA+0x1e4>)
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de8:	4a41      	ldr	r2, [pc, #260]	; (8002ef0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8002dea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3338      	adds	r3, #56	; 0x38
 8002df6:	4619      	mov	r1, r3
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	887b      	ldrh	r3, [r7, #2]
 8002dfc:	f7fe fe04 	bl	8001a08 <HAL_DMA_Start_IT>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_TIM_IC_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e06a      	b.n	8002ee0 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	68da      	ldr	r2, [r3, #12]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e18:	60da      	str	r2, [r3, #12]
      break;
 8002e1a:	e048      	b.n	8002eae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e20:	4a31      	ldr	r2, [pc, #196]	; (8002ee8 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002e22:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e28:	4a30      	ldr	r2, [pc, #192]	; (8002eec <HAL_TIM_IC_Start_DMA+0x1e4>)
 8002e2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	4a2f      	ldr	r2, [pc, #188]	; (8002ef0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8002e32:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	333c      	adds	r3, #60	; 0x3c
 8002e3e:	4619      	mov	r1, r3
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	f7fe fde0 	bl	8001a08 <HAL_DMA_Start_IT>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d001      	beq.n	8002e52 <HAL_TIM_IC_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e046      	b.n	8002ee0 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e60:	60da      	str	r2, [r3, #12]
      break;
 8002e62:	e024      	b.n	8002eae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	4a1f      	ldr	r2, [pc, #124]	; (8002ee8 <HAL_TIM_IC_Start_DMA+0x1e0>)
 8002e6a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e70:	4a1e      	ldr	r2, [pc, #120]	; (8002eec <HAL_TIM_IC_Start_DMA+0x1e4>)
 8002e72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e78:	4a1d      	ldr	r2, [pc, #116]	; (8002ef0 <HAL_TIM_IC_Start_DMA+0x1e8>)
 8002e7a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3340      	adds	r3, #64	; 0x40
 8002e86:	4619      	mov	r1, r3
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	f7fe fdbc 	bl	8001a08 <HAL_DMA_Start_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d001      	beq.n	8002e9a <HAL_TIM_IC_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e022      	b.n	8002ee0 <HAL_TIM_IC_Start_DMA+0x1d8>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	68da      	ldr	r2, [r3, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002ea8:	60da      	str	r2, [r3, #12]
      break;
 8002eaa:	e000      	b.n	8002eae <HAL_TIM_IC_Start_DMA+0x1a6>
    }

    default:
      break;
 8002eac:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fdaa 	bl	8003a10 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	f003 0307 	and.w	r3, r3, #7
 8002ec6:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2b06      	cmp	r3, #6
 8002ecc:	d007      	beq.n	8002ede <HAL_TIM_IC_Start_DMA+0x1d6>
  {
    __HAL_TIM_ENABLE(htim);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f042 0201 	orr.w	r2, r2, #1
 8002edc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ede:	2300      	movs	r3, #0
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}
 8002ee8:	080034bf 	.word	0x080034bf
 8002eec:	0800352f 	.word	0x0800352f
 8002ef0:	0800349b 	.word	0x0800349b

08002ef4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e02d      	b.n	8002f64 <HAL_TIM_OnePulse_Init+0x70>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f7fe fa49 	bl	80013b4 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3304      	adds	r3, #4
 8002f32:	4619      	mov	r1, r3
 8002f34:	4610      	mov	r0, r2
 8002f36:	f000 fb33 	bl	80035a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0208 	bic.w	r2, r2, #8
 8002f48:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	683a      	ldr	r2, [r7, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	601a      	str	r2, [r3, #0]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	691b      	ldr	r3, [r3, #16]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d122      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0302 	and.w	r3, r3, #2
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	d11b      	bne.n	8002fc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f06f 0202 	mvn.w	r2, #2
 8002f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d003      	beq.n	8002fb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 fa41 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 8002fb4:	e005      	b.n	8002fc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f000 fa33 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f000 fa4e 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d122      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	f003 0304 	and.w	r3, r3, #4
 8002fe0:	2b04      	cmp	r3, #4
 8002fe2:	d11b      	bne.n	800301c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0204 	mvn.w	r2, #4
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2202      	movs	r2, #2
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa17 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa09 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fa24 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d122      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f003 0308 	and.w	r3, r3, #8
 8003034:	2b08      	cmp	r3, #8
 8003036:	d11b      	bne.n	8003070 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0208 	mvn.w	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2204      	movs	r2, #4
 8003046:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	69db      	ldr	r3, [r3, #28]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 f9ed 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f9df 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 f9fa 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0310 	and.w	r3, r3, #16
 800307a:	2b10      	cmp	r3, #16
 800307c:	d122      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0310 	and.w	r3, r3, #16
 8003088:	2b10      	cmp	r3, #16
 800308a:	d11b      	bne.n	80030c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0210 	mvn.w	r2, #16
 8003094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2208      	movs	r2, #8
 800309a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 f9c3 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
 80030b0:	e005      	b.n	80030be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 f9b5 	bl	8003422 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9d0 	bl	800345e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d10e      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0301 	and.w	r3, r3, #1
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d107      	bne.n	80030f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f06f 0201 	mvn.w	r2, #1
 80030e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	f7fe f802 	bl	80010f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030fa:	2b80      	cmp	r3, #128	; 0x80
 80030fc:	d10e      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003108:	2b80      	cmp	r3, #128	; 0x80
 800310a:	d107      	bne.n	800311c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003116:	6878      	ldr	r0, [r7, #4]
 8003118:	f000 fd18 	bl	8003b4c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003126:	2b40      	cmp	r3, #64	; 0x40
 8003128:	d10e      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003134:	2b40      	cmp	r3, #64	; 0x40
 8003136:	d107      	bne.n	8003148 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 f995 	bl	8003472 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	f003 0320 	and.w	r3, r3, #32
 8003152:	2b20      	cmp	r3, #32
 8003154:	d10e      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f003 0320 	and.w	r3, r3, #32
 8003160:	2b20      	cmp	r3, #32
 8003162:	d107      	bne.n	8003174 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f06f 0220 	mvn.w	r2, #32
 800316c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 fce2 	bl	8003b38 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003174:	bf00      	nop
 8003176:	3708      	adds	r7, #8
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800318e:	2b01      	cmp	r3, #1
 8003190:	d101      	bne.n	8003196 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003192:	2302      	movs	r3, #2
 8003194:	e08a      	b.n	80032ac <HAL_TIM_IC_ConfigChannel+0x130>
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2201      	movs	r2, #1
 800319a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2202      	movs	r2, #2
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d11b      	bne.n	80031e4 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6818      	ldr	r0, [r3, #0]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	6819      	ldr	r1, [r3, #0]
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	685a      	ldr	r2, [r3, #4]
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f000 fa70 	bl	80036a0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699a      	ldr	r2, [r3, #24]
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 020c 	bic.w	r2, r2, #12
 80031ce:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6999      	ldr	r1, [r3, #24]
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	619a      	str	r2, [r3, #24]
 80031e2:	e05a      	b.n	800329a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2b04      	cmp	r3, #4
 80031e8:	d11c      	bne.n	8003224 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6818      	ldr	r0, [r3, #0]
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	6819      	ldr	r1, [r3, #0]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	f000 fae8 	bl	80037ce <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800320c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6999      	ldr	r1, [r3, #24]
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	021a      	lsls	r2, r3, #8
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	619a      	str	r2, [r3, #24]
 8003222:	e03a      	b.n	800329a <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d11b      	bne.n	8003262 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6818      	ldr	r0, [r3, #0]
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	6819      	ldr	r1, [r3, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	685a      	ldr	r2, [r3, #4]
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	68db      	ldr	r3, [r3, #12]
 800323a:	f000 fb35 	bl	80038a8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	69da      	ldr	r2, [r3, #28]
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 020c 	bic.w	r2, r2, #12
 800324c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	61da      	str	r2, [r3, #28]
 8003260:	e01b      	b.n	800329a <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6818      	ldr	r0, [r3, #0]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	6819      	ldr	r1, [r3, #0]
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	f000 fb55 	bl	8003920 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	69da      	ldr	r2, [r3, #28]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003284:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69d9      	ldr	r1, [r3, #28]
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	021a      	lsls	r2, r3, #8
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	2201      	movs	r2, #1
 800329e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3710      	adds	r7, #16
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}

080032b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b084      	sub	sp, #16
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d101      	bne.n	80032cc <HAL_TIM_ConfigClockSource+0x18>
 80032c8:	2302      	movs	r3, #2
 80032ca:	e0a6      	b.n	800341a <HAL_TIM_ConfigClockSource+0x166>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2201      	movs	r2, #1
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80032ea:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80032f2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68fa      	ldr	r2, [r7, #12]
 80032fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2b40      	cmp	r3, #64	; 0x40
 8003302:	d067      	beq.n	80033d4 <HAL_TIM_ConfigClockSource+0x120>
 8003304:	2b40      	cmp	r3, #64	; 0x40
 8003306:	d80b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x6c>
 8003308:	2b10      	cmp	r3, #16
 800330a:	d073      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x140>
 800330c:	2b10      	cmp	r3, #16
 800330e:	d802      	bhi.n	8003316 <HAL_TIM_ConfigClockSource+0x62>
 8003310:	2b00      	cmp	r3, #0
 8003312:	d06f      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003314:	e078      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003316:	2b20      	cmp	r3, #32
 8003318:	d06c      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x140>
 800331a:	2b30      	cmp	r3, #48	; 0x30
 800331c:	d06a      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800331e:	e073      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003320:	2b70      	cmp	r3, #112	; 0x70
 8003322:	d00d      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x8c>
 8003324:	2b70      	cmp	r3, #112	; 0x70
 8003326:	d804      	bhi.n	8003332 <HAL_TIM_ConfigClockSource+0x7e>
 8003328:	2b50      	cmp	r3, #80	; 0x50
 800332a:	d033      	beq.n	8003394 <HAL_TIM_ConfigClockSource+0xe0>
 800332c:	2b60      	cmp	r3, #96	; 0x60
 800332e:	d041      	beq.n	80033b4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003330:	e06a      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003336:	d066      	beq.n	8003406 <HAL_TIM_ConfigClockSource+0x152>
 8003338:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800333c:	d017      	beq.n	800336e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800333e:	e063      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f000 fb3e 	bl	80039d0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003362:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68fa      	ldr	r2, [r7, #12]
 800336a:	609a      	str	r2, [r3, #8]
      break;
 800336c:	e04c      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6818      	ldr	r0, [r3, #0]
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	6899      	ldr	r1, [r3, #8]
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f000 fb27 	bl	80039d0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689a      	ldr	r2, [r3, #8]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003390:	609a      	str	r2, [r3, #8]
      break;
 8003392:	e039      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	6859      	ldr	r1, [r3, #4]
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	461a      	mov	r2, r3
 80033a2:	f000 f9e5 	bl	8003770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2150      	movs	r1, #80	; 0x50
 80033ac:	4618      	mov	r0, r3
 80033ae:	f000 faf4 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80033b2:	e029      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6818      	ldr	r0, [r3, #0]
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	461a      	mov	r2, r3
 80033c2:	f000 fa41 	bl	8003848 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	2160      	movs	r1, #96	; 0x60
 80033cc:	4618      	mov	r0, r3
 80033ce:	f000 fae4 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80033d2:	e019      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6818      	ldr	r0, [r3, #0]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	6859      	ldr	r1, [r3, #4]
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	461a      	mov	r2, r3
 80033e2:	f000 f9c5 	bl	8003770 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2140      	movs	r1, #64	; 0x40
 80033ec:	4618      	mov	r0, r3
 80033ee:	f000 fad4 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 80033f2:	e009      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4619      	mov	r1, r3
 80033fe:	4610      	mov	r0, r2
 8003400:	f000 facb 	bl	800399a <TIM_ITRx_SetConfig>
      break;
 8003404:	e000      	b.n	8003408 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003406:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2201      	movs	r2, #1
 800340c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}

08003422 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800344a:	b480      	push	{r7}
 800344c:	b083      	sub	sp, #12
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003452:	bf00      	nop
 8003454:	370c      	adds	r7, #12
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr

0800345e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr

08003472 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003472:	b480      	push	{r7}
 8003474:	b083      	sub	sp, #12
 8003476:	af00      	add	r7, sp, #0
 8003478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800347a:	bf00      	nop
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034a6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	f7ff ffe8 	bl	8003486 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 80034b6:	bf00      	nop
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}

080034be <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ca:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2201      	movs	r2, #1
 80034d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	429a      	cmp	r2, r3
 80034dc:	d103      	bne.n	80034e6 <TIM_DMACaptureCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	771a      	strb	r2, [r3, #28]
 80034e4:	e019      	b.n	800351a <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d103      	bne.n	80034f8 <TIM_DMACaptureCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	2202      	movs	r2, #2
 80034f4:	771a      	strb	r2, [r3, #28]
 80034f6:	e010      	b.n	800351a <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	687a      	ldr	r2, [r7, #4]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d103      	bne.n	800350a <TIM_DMACaptureCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2204      	movs	r2, #4
 8003506:	771a      	strb	r2, [r3, #28]
 8003508:	e007      	b.n	800351a <TIM_DMACaptureCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800350e:	687a      	ldr	r2, [r7, #4]
 8003510:	429a      	cmp	r2, r3
 8003512:	d102      	bne.n	800351a <TIM_DMACaptureCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2208      	movs	r2, #8
 8003518:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff ff8b 	bl	8003436 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	771a      	strb	r2, [r3, #28]
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d103      	bne.n	8003556 <TIM_DMACaptureHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	2201      	movs	r2, #1
 8003552:	771a      	strb	r2, [r3, #28]
 8003554:	e019      	b.n	800358a <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	429a      	cmp	r2, r3
 800355e:	d103      	bne.n	8003568 <TIM_DMACaptureHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2202      	movs	r2, #2
 8003564:	771a      	strb	r2, [r3, #28]
 8003566:	e010      	b.n	800358a <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	429a      	cmp	r2, r3
 8003570:	d103      	bne.n	800357a <TIM_DMACaptureHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2204      	movs	r2, #4
 8003576:	771a      	strb	r2, [r3, #28]
 8003578:	e007      	b.n	800358a <TIM_DMACaptureHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	429a      	cmp	r2, r3
 8003582:	d102      	bne.n	800358a <TIM_DMACaptureHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2208      	movs	r2, #8
 8003588:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff ff5d 	bl	800344a <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	771a      	strb	r2, [r3, #28]
}
 8003596:	bf00      	nop
 8003598:	3710      	adds	r7, #16
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
	...

080035a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a34      	ldr	r2, [pc, #208]	; (8003684 <TIM_Base_SetConfig+0xe4>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00f      	beq.n	80035d8 <TIM_Base_SetConfig+0x38>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035be:	d00b      	beq.n	80035d8 <TIM_Base_SetConfig+0x38>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a31      	ldr	r2, [pc, #196]	; (8003688 <TIM_Base_SetConfig+0xe8>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d007      	beq.n	80035d8 <TIM_Base_SetConfig+0x38>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a30      	ldr	r2, [pc, #192]	; (800368c <TIM_Base_SetConfig+0xec>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d003      	beq.n	80035d8 <TIM_Base_SetConfig+0x38>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	4a2f      	ldr	r2, [pc, #188]	; (8003690 <TIM_Base_SetConfig+0xf0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d108      	bne.n	80035ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	4313      	orrs	r3, r2
 80035e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a25      	ldr	r2, [pc, #148]	; (8003684 <TIM_Base_SetConfig+0xe4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01b      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035f8:	d017      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <TIM_Base_SetConfig+0xe8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d013      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a21      	ldr	r2, [pc, #132]	; (800368c <TIM_Base_SetConfig+0xec>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00f      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <TIM_Base_SetConfig+0xf0>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00b      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <TIM_Base_SetConfig+0xf4>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d007      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <TIM_Base_SetConfig+0xf8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d003      	beq.n	800362a <TIM_Base_SetConfig+0x8a>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a1d      	ldr	r2, [pc, #116]	; (800369c <TIM_Base_SetConfig+0xfc>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d108      	bne.n	800363c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003630:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68fa      	ldr	r2, [r7, #12]
 800364e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689a      	ldr	r2, [r3, #8]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <TIM_Base_SetConfig+0xe4>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d103      	bne.n	8003670 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	615a      	str	r2, [r3, #20]
}
 8003676:	bf00      	nop
 8003678:	3714      	adds	r7, #20
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	40010000 	.word	0x40010000
 8003688:	40000400 	.word	0x40000400
 800368c:	40000800 	.word	0x40000800
 8003690:	40000c00 	.word	0x40000c00
 8003694:	40014000 	.word	0x40014000
 8003698:	40014400 	.word	0x40014400
 800369c:	40014800 	.word	0x40014800

080036a0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	607a      	str	r2, [r7, #4]
 80036ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	f023 0201 	bic.w	r2, r3, #1
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6a1b      	ldr	r3, [r3, #32]
 80036c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	4a24      	ldr	r2, [pc, #144]	; (800375c <TIM_TI1_SetConfig+0xbc>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d013      	beq.n	80036f6 <TIM_TI1_SetConfig+0x56>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036d4:	d00f      	beq.n	80036f6 <TIM_TI1_SetConfig+0x56>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4a21      	ldr	r2, [pc, #132]	; (8003760 <TIM_TI1_SetConfig+0xc0>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d00b      	beq.n	80036f6 <TIM_TI1_SetConfig+0x56>
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4a20      	ldr	r2, [pc, #128]	; (8003764 <TIM_TI1_SetConfig+0xc4>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d007      	beq.n	80036f6 <TIM_TI1_SetConfig+0x56>
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	4a1f      	ldr	r2, [pc, #124]	; (8003768 <TIM_TI1_SetConfig+0xc8>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d003      	beq.n	80036f6 <TIM_TI1_SetConfig+0x56>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	4a1e      	ldr	r2, [pc, #120]	; (800376c <TIM_TI1_SetConfig+0xcc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <TIM_TI1_SetConfig+0x5a>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <TIM_TI1_SetConfig+0x5c>
 80036fa:	2300      	movs	r3, #0
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d008      	beq.n	8003712 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	f023 0303 	bic.w	r3, r3, #3
 8003706:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4313      	orrs	r3, r2
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	e003      	b.n	800371a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	f043 0301 	orr.w	r3, r3, #1
 8003718:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003720:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	011b      	lsls	r3, r3, #4
 8003726:	b2db      	uxtb	r3, r3
 8003728:	697a      	ldr	r2, [r7, #20]
 800372a:	4313      	orrs	r3, r2
 800372c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f023 030a 	bic.w	r3, r3, #10
 8003734:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	f003 030a 	and.w	r3, r3, #10
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	693a      	ldr	r2, [r7, #16]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	bf00      	nop
 8003750:	371c      	adds	r7, #28
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40010000 	.word	0x40010000
 8003760:	40000400 	.word	0x40000400
 8003764:	40000800 	.word	0x40000800
 8003768:	40000c00 	.word	0x40000c00
 800376c:	40014000 	.word	0x40014000

08003770 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003770:	b480      	push	{r7}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60f8      	str	r0, [r7, #12]
 8003778:	60b9      	str	r1, [r7, #8]
 800377a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6a1b      	ldr	r3, [r3, #32]
 8003786:	f023 0201 	bic.w	r2, r3, #1
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800379a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	011b      	lsls	r3, r3, #4
 80037a0:	693a      	ldr	r2, [r7, #16]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 030a 	bic.w	r3, r3, #10
 80037ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	621a      	str	r2, [r3, #32]
}
 80037c2:	bf00      	nop
 80037c4:	371c      	adds	r7, #28
 80037c6:	46bd      	mov	sp, r7
 80037c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037cc:	4770      	bx	lr

080037ce <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80037ce:	b480      	push	{r7}
 80037d0:	b087      	sub	sp, #28
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	60f8      	str	r0, [r7, #12]
 80037d6:	60b9      	str	r1, [r7, #8]
 80037d8:	607a      	str	r2, [r7, #4]
 80037da:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f023 0210 	bic.w	r2, r3, #16
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	4313      	orrs	r3, r2
 8003804:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800380c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	031b      	lsls	r3, r3, #12
 8003812:	b29b      	uxth	r3, r3
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003820:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	011b      	lsls	r3, r3, #4
 8003826:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4313      	orrs	r3, r2
 800382e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	621a      	str	r2, [r3, #32]
}
 800383c:	bf00      	nop
 800383e:	371c      	adds	r7, #28
 8003840:	46bd      	mov	sp, r7
 8003842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003846:	4770      	bx	lr

08003848 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003848:	b480      	push	{r7}
 800384a:	b087      	sub	sp, #28
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	f023 0210 	bic.w	r2, r3, #16
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6a1b      	ldr	r3, [r3, #32]
 800386a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003872:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	031b      	lsls	r3, r3, #12
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	4313      	orrs	r3, r2
 800387c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003884:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003886:	68bb      	ldr	r3, [r7, #8]
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	693a      	ldr	r2, [r7, #16]
 800389a:	621a      	str	r2, [r3, #32]
}
 800389c:	bf00      	nop
 800389e:	371c      	adds	r7, #28
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b087      	sub	sp, #28
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	6a1b      	ldr	r3, [r3, #32]
 80038ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	69db      	ldr	r3, [r3, #28]
 80038c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f023 0303 	bic.w	r3, r3, #3
 80038d4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4313      	orrs	r3, r2
 80038dc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80038e4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	011b      	lsls	r3, r3, #4
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	021b      	lsls	r3, r3, #8
 80038fe:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	693a      	ldr	r2, [r7, #16]
 8003912:	621a      	str	r2, [r3, #32]
}
 8003914:	bf00      	nop
 8003916:	371c      	adds	r7, #28
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003920:	b480      	push	{r7}
 8003922:	b087      	sub	sp, #28
 8003924:	af00      	add	r7, sp, #0
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1b      	ldr	r3, [r3, #32]
 8003932:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800394c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	021b      	lsls	r3, r3, #8
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	4313      	orrs	r3, r2
 8003956:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800395e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	031b      	lsls	r3, r3, #12
 8003964:	b29b      	uxth	r3, r3
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003972:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	031b      	lsls	r3, r3, #12
 8003978:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	4313      	orrs	r3, r2
 8003980:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	697a      	ldr	r2, [r7, #20]
 8003986:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	621a      	str	r2, [r3, #32]
}
 800398e:	bf00      	nop
 8003990:	371c      	adds	r7, #28
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800399a:	b480      	push	{r7}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	f043 0307 	orr.w	r3, r3, #7
 80039bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	609a      	str	r2, [r3, #8]
}
 80039c4:	bf00      	nop
 80039c6:	3714      	adds	r7, #20
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b087      	sub	sp, #28
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
 80039dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	021a      	lsls	r2, r3, #8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	431a      	orrs	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	697a      	ldr	r2, [r7, #20]
 8003a02:	609a      	str	r2, [r3, #8]
}
 8003a04:	bf00      	nop
 8003a06:	371c      	adds	r7, #28
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a10:	b480      	push	{r7}
 8003a12:	b087      	sub	sp, #28
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	f003 031f 	and.w	r3, r3, #31
 8003a22:	2201      	movs	r2, #1
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6a1a      	ldr	r2, [r3, #32]
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	401a      	ands	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6a1a      	ldr	r2, [r3, #32]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	f003 031f 	and.w	r3, r3, #31
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	fa01 f303 	lsl.w	r3, r1, r3
 8003a48:	431a      	orrs	r2, r3
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	621a      	str	r2, [r3, #32]
}
 8003a4e:	bf00      	nop
 8003a50:	371c      	adds	r7, #28
 8003a52:	46bd      	mov	sp, r7
 8003a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a58:	4770      	bx	lr
	...

08003a5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d101      	bne.n	8003a74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a70:	2302      	movs	r3, #2
 8003a72:	e050      	b.n	8003b16 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2202      	movs	r2, #2
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1c      	ldr	r2, [pc, #112]	; (8003b24 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d018      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac0:	d013      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a18      	ldr	r2, [pc, #96]	; (8003b28 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d00e      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d009      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a15      	ldr	r2, [pc, #84]	; (8003b30 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d004      	beq.n	8003aea <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a13      	ldr	r2, [pc, #76]	; (8003b34 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d10c      	bne.n	8003b04 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68ba      	ldr	r2, [r7, #8]
 8003b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	40010000 	.word	0x40010000
 8003b28:	40000400 	.word	0x40000400
 8003b2c:	40000800 	.word	0x40000800
 8003b30:	40000c00 	.word	0x40000c00
 8003b34:	40014000 	.word	0x40014000

08003b38 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b083      	sub	sp, #12
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b54:	bf00      	nop
 8003b56:	370c      	adds	r7, #12
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d101      	bne.n	8003b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e03f      	b.n	8003bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003b78:	b2db      	uxtb	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7fd fc3c 	bl	8001404 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2224      	movs	r2, #36	; 0x24
 8003b90:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 f829 	bl	8003bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691a      	ldr	r2, [r3, #16]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68da      	ldr	r2, [r3, #12]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2220      	movs	r2, #32
 8003bec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
	...

08003bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	68da      	ldr	r2, [r3, #12]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	430a      	orrs	r2, r1
 8003c1a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	431a      	orrs	r2, r3
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	69db      	ldr	r3, [r3, #28]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003c3e:	f023 030c 	bic.w	r3, r3, #12
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	68f9      	ldr	r1, [r7, #12]
 8003c48:	430b      	orrs	r3, r1
 8003c4a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	699a      	ldr	r2, [r3, #24]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	69db      	ldr	r3, [r3, #28]
 8003c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6a:	f040 818b 	bne.w	8003f84 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4ac1      	ldr	r2, [pc, #772]	; (8003f78 <UART_SetConfig+0x37c>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d005      	beq.n	8003c84 <UART_SetConfig+0x88>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4abf      	ldr	r2, [pc, #764]	; (8003f7c <UART_SetConfig+0x380>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	f040 80bd 	bne.w	8003dfe <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003c84:	f7fe ff84 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003c88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	461d      	mov	r5, r3
 8003c8e:	f04f 0600 	mov.w	r6, #0
 8003c92:	46a8      	mov	r8, r5
 8003c94:	46b1      	mov	r9, r6
 8003c96:	eb18 0308 	adds.w	r3, r8, r8
 8003c9a:	eb49 0409 	adc.w	r4, r9, r9
 8003c9e:	4698      	mov	r8, r3
 8003ca0:	46a1      	mov	r9, r4
 8003ca2:	eb18 0805 	adds.w	r8, r8, r5
 8003ca6:	eb49 0906 	adc.w	r9, r9, r6
 8003caa:	f04f 0100 	mov.w	r1, #0
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003cb6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003cba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003cbe:	4688      	mov	r8, r1
 8003cc0:	4691      	mov	r9, r2
 8003cc2:	eb18 0005 	adds.w	r0, r8, r5
 8003cc6:	eb49 0106 	adc.w	r1, r9, r6
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	461d      	mov	r5, r3
 8003cd0:	f04f 0600 	mov.w	r6, #0
 8003cd4:	196b      	adds	r3, r5, r5
 8003cd6:	eb46 0406 	adc.w	r4, r6, r6
 8003cda:	461a      	mov	r2, r3
 8003cdc:	4623      	mov	r3, r4
 8003cde:	f7fc fe71 	bl	80009c4 <__aeabi_uldivmod>
 8003ce2:	4603      	mov	r3, r0
 8003ce4:	460c      	mov	r4, r1
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	4ba5      	ldr	r3, [pc, #660]	; (8003f80 <UART_SetConfig+0x384>)
 8003cea:	fba3 2302 	umull	r2, r3, r3, r2
 8003cee:	095b      	lsrs	r3, r3, #5
 8003cf0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	f04f 0600 	mov.w	r6, #0
 8003cfc:	46a9      	mov	r9, r5
 8003cfe:	46b2      	mov	sl, r6
 8003d00:	eb19 0309 	adds.w	r3, r9, r9
 8003d04:	eb4a 040a 	adc.w	r4, sl, sl
 8003d08:	4699      	mov	r9, r3
 8003d0a:	46a2      	mov	sl, r4
 8003d0c:	eb19 0905 	adds.w	r9, r9, r5
 8003d10:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d20:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d24:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d28:	4689      	mov	r9, r1
 8003d2a:	4692      	mov	sl, r2
 8003d2c:	eb19 0005 	adds.w	r0, r9, r5
 8003d30:	eb4a 0106 	adc.w	r1, sl, r6
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	461d      	mov	r5, r3
 8003d3a:	f04f 0600 	mov.w	r6, #0
 8003d3e:	196b      	adds	r3, r5, r5
 8003d40:	eb46 0406 	adc.w	r4, r6, r6
 8003d44:	461a      	mov	r2, r3
 8003d46:	4623      	mov	r3, r4
 8003d48:	f7fc fe3c 	bl	80009c4 <__aeabi_uldivmod>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	461a      	mov	r2, r3
 8003d52:	4b8b      	ldr	r3, [pc, #556]	; (8003f80 <UART_SetConfig+0x384>)
 8003d54:	fba3 1302 	umull	r1, r3, r3, r2
 8003d58:	095b      	lsrs	r3, r3, #5
 8003d5a:	2164      	movs	r1, #100	; 0x64
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	00db      	lsls	r3, r3, #3
 8003d64:	3332      	adds	r3, #50	; 0x32
 8003d66:	4a86      	ldr	r2, [pc, #536]	; (8003f80 <UART_SetConfig+0x384>)
 8003d68:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6c:	095b      	lsrs	r3, r3, #5
 8003d6e:	005b      	lsls	r3, r3, #1
 8003d70:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003d74:	4498      	add	r8, r3
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	461d      	mov	r5, r3
 8003d7a:	f04f 0600 	mov.w	r6, #0
 8003d7e:	46a9      	mov	r9, r5
 8003d80:	46b2      	mov	sl, r6
 8003d82:	eb19 0309 	adds.w	r3, r9, r9
 8003d86:	eb4a 040a 	adc.w	r4, sl, sl
 8003d8a:	4699      	mov	r9, r3
 8003d8c:	46a2      	mov	sl, r4
 8003d8e:	eb19 0905 	adds.w	r9, r9, r5
 8003d92:	eb4a 0a06 	adc.w	sl, sl, r6
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003daa:	4689      	mov	r9, r1
 8003dac:	4692      	mov	sl, r2
 8003dae:	eb19 0005 	adds.w	r0, r9, r5
 8003db2:	eb4a 0106 	adc.w	r1, sl, r6
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	461d      	mov	r5, r3
 8003dbc:	f04f 0600 	mov.w	r6, #0
 8003dc0:	196b      	adds	r3, r5, r5
 8003dc2:	eb46 0406 	adc.w	r4, r6, r6
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	4623      	mov	r3, r4
 8003dca:	f7fc fdfb 	bl	80009c4 <__aeabi_uldivmod>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	460c      	mov	r4, r1
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	4b6a      	ldr	r3, [pc, #424]	; (8003f80 <UART_SetConfig+0x384>)
 8003dd6:	fba3 1302 	umull	r1, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	2164      	movs	r1, #100	; 0x64
 8003dde:	fb01 f303 	mul.w	r3, r1, r3
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	00db      	lsls	r3, r3, #3
 8003de6:	3332      	adds	r3, #50	; 0x32
 8003de8:	4a65      	ldr	r2, [pc, #404]	; (8003f80 <UART_SetConfig+0x384>)
 8003dea:	fba2 2303 	umull	r2, r3, r2, r3
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	f003 0207 	and.w	r2, r3, #7
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4442      	add	r2, r8
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	e26f      	b.n	80042de <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dfe:	f7fe feb3 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8003e02:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	461d      	mov	r5, r3
 8003e08:	f04f 0600 	mov.w	r6, #0
 8003e0c:	46a8      	mov	r8, r5
 8003e0e:	46b1      	mov	r9, r6
 8003e10:	eb18 0308 	adds.w	r3, r8, r8
 8003e14:	eb49 0409 	adc.w	r4, r9, r9
 8003e18:	4698      	mov	r8, r3
 8003e1a:	46a1      	mov	r9, r4
 8003e1c:	eb18 0805 	adds.w	r8, r8, r5
 8003e20:	eb49 0906 	adc.w	r9, r9, r6
 8003e24:	f04f 0100 	mov.w	r1, #0
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003e30:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003e34:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003e38:	4688      	mov	r8, r1
 8003e3a:	4691      	mov	r9, r2
 8003e3c:	eb18 0005 	adds.w	r0, r8, r5
 8003e40:	eb49 0106 	adc.w	r1, r9, r6
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	461d      	mov	r5, r3
 8003e4a:	f04f 0600 	mov.w	r6, #0
 8003e4e:	196b      	adds	r3, r5, r5
 8003e50:	eb46 0406 	adc.w	r4, r6, r6
 8003e54:	461a      	mov	r2, r3
 8003e56:	4623      	mov	r3, r4
 8003e58:	f7fc fdb4 	bl	80009c4 <__aeabi_uldivmod>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	460c      	mov	r4, r1
 8003e60:	461a      	mov	r2, r3
 8003e62:	4b47      	ldr	r3, [pc, #284]	; (8003f80 <UART_SetConfig+0x384>)
 8003e64:	fba3 2302 	umull	r2, r3, r3, r2
 8003e68:	095b      	lsrs	r3, r3, #5
 8003e6a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	461d      	mov	r5, r3
 8003e72:	f04f 0600 	mov.w	r6, #0
 8003e76:	46a9      	mov	r9, r5
 8003e78:	46b2      	mov	sl, r6
 8003e7a:	eb19 0309 	adds.w	r3, r9, r9
 8003e7e:	eb4a 040a 	adc.w	r4, sl, sl
 8003e82:	4699      	mov	r9, r3
 8003e84:	46a2      	mov	sl, r4
 8003e86:	eb19 0905 	adds.w	r9, r9, r5
 8003e8a:	eb4a 0a06 	adc.w	sl, sl, r6
 8003e8e:	f04f 0100 	mov.w	r1, #0
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e9a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e9e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ea2:	4689      	mov	r9, r1
 8003ea4:	4692      	mov	sl, r2
 8003ea6:	eb19 0005 	adds.w	r0, r9, r5
 8003eaa:	eb4a 0106 	adc.w	r1, sl, r6
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	461d      	mov	r5, r3
 8003eb4:	f04f 0600 	mov.w	r6, #0
 8003eb8:	196b      	adds	r3, r5, r5
 8003eba:	eb46 0406 	adc.w	r4, r6, r6
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	4623      	mov	r3, r4
 8003ec2:	f7fc fd7f 	bl	80009c4 <__aeabi_uldivmod>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	460c      	mov	r4, r1
 8003eca:	461a      	mov	r2, r3
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <UART_SetConfig+0x384>)
 8003ece:	fba3 1302 	umull	r1, r3, r3, r2
 8003ed2:	095b      	lsrs	r3, r3, #5
 8003ed4:	2164      	movs	r1, #100	; 0x64
 8003ed6:	fb01 f303 	mul.w	r3, r1, r3
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	00db      	lsls	r3, r3, #3
 8003ede:	3332      	adds	r3, #50	; 0x32
 8003ee0:	4a27      	ldr	r2, [pc, #156]	; (8003f80 <UART_SetConfig+0x384>)
 8003ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003eee:	4498      	add	r8, r3
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	461d      	mov	r5, r3
 8003ef4:	f04f 0600 	mov.w	r6, #0
 8003ef8:	46a9      	mov	r9, r5
 8003efa:	46b2      	mov	sl, r6
 8003efc:	eb19 0309 	adds.w	r3, r9, r9
 8003f00:	eb4a 040a 	adc.w	r4, sl, sl
 8003f04:	4699      	mov	r9, r3
 8003f06:	46a2      	mov	sl, r4
 8003f08:	eb19 0905 	adds.w	r9, r9, r5
 8003f0c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003f10:	f04f 0100 	mov.w	r1, #0
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f1c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003f20:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003f24:	4689      	mov	r9, r1
 8003f26:	4692      	mov	sl, r2
 8003f28:	eb19 0005 	adds.w	r0, r9, r5
 8003f2c:	eb4a 0106 	adc.w	r1, sl, r6
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	461d      	mov	r5, r3
 8003f36:	f04f 0600 	mov.w	r6, #0
 8003f3a:	196b      	adds	r3, r5, r5
 8003f3c:	eb46 0406 	adc.w	r4, r6, r6
 8003f40:	461a      	mov	r2, r3
 8003f42:	4623      	mov	r3, r4
 8003f44:	f7fc fd3e 	bl	80009c4 <__aeabi_uldivmod>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	460c      	mov	r4, r1
 8003f4c:	461a      	mov	r2, r3
 8003f4e:	4b0c      	ldr	r3, [pc, #48]	; (8003f80 <UART_SetConfig+0x384>)
 8003f50:	fba3 1302 	umull	r1, r3, r3, r2
 8003f54:	095b      	lsrs	r3, r3, #5
 8003f56:	2164      	movs	r1, #100	; 0x64
 8003f58:	fb01 f303 	mul.w	r3, r1, r3
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	00db      	lsls	r3, r3, #3
 8003f60:	3332      	adds	r3, #50	; 0x32
 8003f62:	4a07      	ldr	r2, [pc, #28]	; (8003f80 <UART_SetConfig+0x384>)
 8003f64:	fba2 2303 	umull	r2, r3, r2, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	f003 0207 	and.w	r2, r3, #7
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4442      	add	r2, r8
 8003f74:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003f76:	e1b2      	b.n	80042de <UART_SetConfig+0x6e2>
 8003f78:	40011000 	.word	0x40011000
 8003f7c:	40011400 	.word	0x40011400
 8003f80:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4ad7      	ldr	r2, [pc, #860]	; (80042e8 <UART_SetConfig+0x6ec>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d005      	beq.n	8003f9a <UART_SetConfig+0x39e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4ad6      	ldr	r2, [pc, #856]	; (80042ec <UART_SetConfig+0x6f0>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	f040 80d1 	bne.w	800413c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f9a:	f7fe fdf9 	bl	8002b90 <HAL_RCC_GetPCLK2Freq>
 8003f9e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	469a      	mov	sl, r3
 8003fa4:	f04f 0b00 	mov.w	fp, #0
 8003fa8:	46d0      	mov	r8, sl
 8003faa:	46d9      	mov	r9, fp
 8003fac:	eb18 0308 	adds.w	r3, r8, r8
 8003fb0:	eb49 0409 	adc.w	r4, r9, r9
 8003fb4:	4698      	mov	r8, r3
 8003fb6:	46a1      	mov	r9, r4
 8003fb8:	eb18 080a 	adds.w	r8, r8, sl
 8003fbc:	eb49 090b 	adc.w	r9, r9, fp
 8003fc0:	f04f 0100 	mov.w	r1, #0
 8003fc4:	f04f 0200 	mov.w	r2, #0
 8003fc8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003fcc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003fd0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003fd4:	4688      	mov	r8, r1
 8003fd6:	4691      	mov	r9, r2
 8003fd8:	eb1a 0508 	adds.w	r5, sl, r8
 8003fdc:	eb4b 0609 	adc.w	r6, fp, r9
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f04f 0200 	mov.w	r2, #0
 8003fea:	f04f 0300 	mov.w	r3, #0
 8003fee:	f04f 0400 	mov.w	r4, #0
 8003ff2:	0094      	lsls	r4, r2, #2
 8003ff4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ff8:	008b      	lsls	r3, r1, #2
 8003ffa:	461a      	mov	r2, r3
 8003ffc:	4623      	mov	r3, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	4631      	mov	r1, r6
 8004002:	f7fc fcdf 	bl	80009c4 <__aeabi_uldivmod>
 8004006:	4603      	mov	r3, r0
 8004008:	460c      	mov	r4, r1
 800400a:	461a      	mov	r2, r3
 800400c:	4bb8      	ldr	r3, [pc, #736]	; (80042f0 <UART_SetConfig+0x6f4>)
 800400e:	fba3 2302 	umull	r2, r3, r3, r2
 8004012:	095b      	lsrs	r3, r3, #5
 8004014:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	469b      	mov	fp, r3
 800401c:	f04f 0c00 	mov.w	ip, #0
 8004020:	46d9      	mov	r9, fp
 8004022:	46e2      	mov	sl, ip
 8004024:	eb19 0309 	adds.w	r3, r9, r9
 8004028:	eb4a 040a 	adc.w	r4, sl, sl
 800402c:	4699      	mov	r9, r3
 800402e:	46a2      	mov	sl, r4
 8004030:	eb19 090b 	adds.w	r9, r9, fp
 8004034:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004038:	f04f 0100 	mov.w	r1, #0
 800403c:	f04f 0200 	mov.w	r2, #0
 8004040:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004044:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004048:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800404c:	4689      	mov	r9, r1
 800404e:	4692      	mov	sl, r2
 8004050:	eb1b 0509 	adds.w	r5, fp, r9
 8004054:	eb4c 060a 	adc.w	r6, ip, sl
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	4619      	mov	r1, r3
 800405e:	f04f 0200 	mov.w	r2, #0
 8004062:	f04f 0300 	mov.w	r3, #0
 8004066:	f04f 0400 	mov.w	r4, #0
 800406a:	0094      	lsls	r4, r2, #2
 800406c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004070:	008b      	lsls	r3, r1, #2
 8004072:	461a      	mov	r2, r3
 8004074:	4623      	mov	r3, r4
 8004076:	4628      	mov	r0, r5
 8004078:	4631      	mov	r1, r6
 800407a:	f7fc fca3 	bl	80009c4 <__aeabi_uldivmod>
 800407e:	4603      	mov	r3, r0
 8004080:	460c      	mov	r4, r1
 8004082:	461a      	mov	r2, r3
 8004084:	4b9a      	ldr	r3, [pc, #616]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004086:	fba3 1302 	umull	r1, r3, r3, r2
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2164      	movs	r1, #100	; 0x64
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	3332      	adds	r3, #50	; 0x32
 8004098:	4a95      	ldr	r2, [pc, #596]	; (80042f0 <UART_SetConfig+0x6f4>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80040a4:	4498      	add	r8, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	469b      	mov	fp, r3
 80040aa:	f04f 0c00 	mov.w	ip, #0
 80040ae:	46d9      	mov	r9, fp
 80040b0:	46e2      	mov	sl, ip
 80040b2:	eb19 0309 	adds.w	r3, r9, r9
 80040b6:	eb4a 040a 	adc.w	r4, sl, sl
 80040ba:	4699      	mov	r9, r3
 80040bc:	46a2      	mov	sl, r4
 80040be:	eb19 090b 	adds.w	r9, r9, fp
 80040c2:	eb4a 0a0c 	adc.w	sl, sl, ip
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	f04f 0200 	mov.w	r2, #0
 80040ce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80040d2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80040d6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80040da:	4689      	mov	r9, r1
 80040dc:	4692      	mov	sl, r2
 80040de:	eb1b 0509 	adds.w	r5, fp, r9
 80040e2:	eb4c 060a 	adc.w	r6, ip, sl
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	4619      	mov	r1, r3
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	f04f 0400 	mov.w	r4, #0
 80040f8:	0094      	lsls	r4, r2, #2
 80040fa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80040fe:	008b      	lsls	r3, r1, #2
 8004100:	461a      	mov	r2, r3
 8004102:	4623      	mov	r3, r4
 8004104:	4628      	mov	r0, r5
 8004106:	4631      	mov	r1, r6
 8004108:	f7fc fc5c 	bl	80009c4 <__aeabi_uldivmod>
 800410c:	4603      	mov	r3, r0
 800410e:	460c      	mov	r4, r1
 8004110:	461a      	mov	r2, r3
 8004112:	4b77      	ldr	r3, [pc, #476]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004114:	fba3 1302 	umull	r1, r3, r3, r2
 8004118:	095b      	lsrs	r3, r3, #5
 800411a:	2164      	movs	r1, #100	; 0x64
 800411c:	fb01 f303 	mul.w	r3, r1, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	011b      	lsls	r3, r3, #4
 8004124:	3332      	adds	r3, #50	; 0x32
 8004126:	4a72      	ldr	r2, [pc, #456]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004128:	fba2 2303 	umull	r2, r3, r2, r3
 800412c:	095b      	lsrs	r3, r3, #5
 800412e:	f003 020f 	and.w	r2, r3, #15
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4442      	add	r2, r8
 8004138:	609a      	str	r2, [r3, #8]
 800413a:	e0d0      	b.n	80042de <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800413c:	f7fe fd14 	bl	8002b68 <HAL_RCC_GetPCLK1Freq>
 8004140:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	469a      	mov	sl, r3
 8004146:	f04f 0b00 	mov.w	fp, #0
 800414a:	46d0      	mov	r8, sl
 800414c:	46d9      	mov	r9, fp
 800414e:	eb18 0308 	adds.w	r3, r8, r8
 8004152:	eb49 0409 	adc.w	r4, r9, r9
 8004156:	4698      	mov	r8, r3
 8004158:	46a1      	mov	r9, r4
 800415a:	eb18 080a 	adds.w	r8, r8, sl
 800415e:	eb49 090b 	adc.w	r9, r9, fp
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	f04f 0200 	mov.w	r2, #0
 800416a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800416e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8004172:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004176:	4688      	mov	r8, r1
 8004178:	4691      	mov	r9, r2
 800417a:	eb1a 0508 	adds.w	r5, sl, r8
 800417e:	eb4b 0609 	adc.w	r6, fp, r9
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	4619      	mov	r1, r3
 8004188:	f04f 0200 	mov.w	r2, #0
 800418c:	f04f 0300 	mov.w	r3, #0
 8004190:	f04f 0400 	mov.w	r4, #0
 8004194:	0094      	lsls	r4, r2, #2
 8004196:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800419a:	008b      	lsls	r3, r1, #2
 800419c:	461a      	mov	r2, r3
 800419e:	4623      	mov	r3, r4
 80041a0:	4628      	mov	r0, r5
 80041a2:	4631      	mov	r1, r6
 80041a4:	f7fc fc0e 	bl	80009c4 <__aeabi_uldivmod>
 80041a8:	4603      	mov	r3, r0
 80041aa:	460c      	mov	r4, r1
 80041ac:	461a      	mov	r2, r3
 80041ae:	4b50      	ldr	r3, [pc, #320]	; (80042f0 <UART_SetConfig+0x6f4>)
 80041b0:	fba3 2302 	umull	r2, r3, r3, r2
 80041b4:	095b      	lsrs	r3, r3, #5
 80041b6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	469b      	mov	fp, r3
 80041be:	f04f 0c00 	mov.w	ip, #0
 80041c2:	46d9      	mov	r9, fp
 80041c4:	46e2      	mov	sl, ip
 80041c6:	eb19 0309 	adds.w	r3, r9, r9
 80041ca:	eb4a 040a 	adc.w	r4, sl, sl
 80041ce:	4699      	mov	r9, r3
 80041d0:	46a2      	mov	sl, r4
 80041d2:	eb19 090b 	adds.w	r9, r9, fp
 80041d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80041da:	f04f 0100 	mov.w	r1, #0
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80041e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80041ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80041ee:	4689      	mov	r9, r1
 80041f0:	4692      	mov	sl, r2
 80041f2:	eb1b 0509 	adds.w	r5, fp, r9
 80041f6:	eb4c 060a 	adc.w	r6, ip, sl
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	4619      	mov	r1, r3
 8004200:	f04f 0200 	mov.w	r2, #0
 8004204:	f04f 0300 	mov.w	r3, #0
 8004208:	f04f 0400 	mov.w	r4, #0
 800420c:	0094      	lsls	r4, r2, #2
 800420e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8004212:	008b      	lsls	r3, r1, #2
 8004214:	461a      	mov	r2, r3
 8004216:	4623      	mov	r3, r4
 8004218:	4628      	mov	r0, r5
 800421a:	4631      	mov	r1, r6
 800421c:	f7fc fbd2 	bl	80009c4 <__aeabi_uldivmod>
 8004220:	4603      	mov	r3, r0
 8004222:	460c      	mov	r4, r1
 8004224:	461a      	mov	r2, r3
 8004226:	4b32      	ldr	r3, [pc, #200]	; (80042f0 <UART_SetConfig+0x6f4>)
 8004228:	fba3 1302 	umull	r1, r3, r3, r2
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	2164      	movs	r1, #100	; 0x64
 8004230:	fb01 f303 	mul.w	r3, r1, r3
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	3332      	adds	r3, #50	; 0x32
 800423a:	4a2d      	ldr	r2, [pc, #180]	; (80042f0 <UART_SetConfig+0x6f4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	095b      	lsrs	r3, r3, #5
 8004242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004246:	4498      	add	r8, r3
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	469b      	mov	fp, r3
 800424c:	f04f 0c00 	mov.w	ip, #0
 8004250:	46d9      	mov	r9, fp
 8004252:	46e2      	mov	sl, ip
 8004254:	eb19 0309 	adds.w	r3, r9, r9
 8004258:	eb4a 040a 	adc.w	r4, sl, sl
 800425c:	4699      	mov	r9, r3
 800425e:	46a2      	mov	sl, r4
 8004260:	eb19 090b 	adds.w	r9, r9, fp
 8004264:	eb4a 0a0c 	adc.w	sl, sl, ip
 8004268:	f04f 0100 	mov.w	r1, #0
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004274:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8004278:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800427c:	4689      	mov	r9, r1
 800427e:	4692      	mov	sl, r2
 8004280:	eb1b 0509 	adds.w	r5, fp, r9
 8004284:	eb4c 060a 	adc.w	r6, ip, sl
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4619      	mov	r1, r3
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	f04f 0400 	mov.w	r4, #0
 800429a:	0094      	lsls	r4, r2, #2
 800429c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80042a0:	008b      	lsls	r3, r1, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	4623      	mov	r3, r4
 80042a6:	4628      	mov	r0, r5
 80042a8:	4631      	mov	r1, r6
 80042aa:	f7fc fb8b 	bl	80009c4 <__aeabi_uldivmod>
 80042ae:	4603      	mov	r3, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	461a      	mov	r2, r3
 80042b4:	4b0e      	ldr	r3, [pc, #56]	; (80042f0 <UART_SetConfig+0x6f4>)
 80042b6:	fba3 1302 	umull	r1, r3, r3, r2
 80042ba:	095b      	lsrs	r3, r3, #5
 80042bc:	2164      	movs	r1, #100	; 0x64
 80042be:	fb01 f303 	mul.w	r3, r1, r3
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	011b      	lsls	r3, r3, #4
 80042c6:	3332      	adds	r3, #50	; 0x32
 80042c8:	4a09      	ldr	r2, [pc, #36]	; (80042f0 <UART_SetConfig+0x6f4>)
 80042ca:	fba2 2303 	umull	r2, r3, r2, r3
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	f003 020f 	and.w	r2, r3, #15
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4442      	add	r2, r8
 80042da:	609a      	str	r2, [r3, #8]
}
 80042dc:	e7ff      	b.n	80042de <UART_SetConfig+0x6e2>
 80042de:	bf00      	nop
 80042e0:	3714      	adds	r7, #20
 80042e2:	46bd      	mov	sp, r7
 80042e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e8:	40011000 	.word	0x40011000
 80042ec:	40011400 	.word	0x40011400
 80042f0:	51eb851f 	.word	0x51eb851f

080042f4 <__libc_init_array>:
 80042f4:	b570      	push	{r4, r5, r6, lr}
 80042f6:	4e0d      	ldr	r6, [pc, #52]	; (800432c <__libc_init_array+0x38>)
 80042f8:	4c0d      	ldr	r4, [pc, #52]	; (8004330 <__libc_init_array+0x3c>)
 80042fa:	1ba4      	subs	r4, r4, r6
 80042fc:	10a4      	asrs	r4, r4, #2
 80042fe:	2500      	movs	r5, #0
 8004300:	42a5      	cmp	r5, r4
 8004302:	d109      	bne.n	8004318 <__libc_init_array+0x24>
 8004304:	4e0b      	ldr	r6, [pc, #44]	; (8004334 <__libc_init_array+0x40>)
 8004306:	4c0c      	ldr	r4, [pc, #48]	; (8004338 <__libc_init_array+0x44>)
 8004308:	f000 f820 	bl	800434c <_init>
 800430c:	1ba4      	subs	r4, r4, r6
 800430e:	10a4      	asrs	r4, r4, #2
 8004310:	2500      	movs	r5, #0
 8004312:	42a5      	cmp	r5, r4
 8004314:	d105      	bne.n	8004322 <__libc_init_array+0x2e>
 8004316:	bd70      	pop	{r4, r5, r6, pc}
 8004318:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800431c:	4798      	blx	r3
 800431e:	3501      	adds	r5, #1
 8004320:	e7ee      	b.n	8004300 <__libc_init_array+0xc>
 8004322:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004326:	4798      	blx	r3
 8004328:	3501      	adds	r5, #1
 800432a:	e7f2      	b.n	8004312 <__libc_init_array+0x1e>
 800432c:	0800438c 	.word	0x0800438c
 8004330:	0800438c 	.word	0x0800438c
 8004334:	0800438c 	.word	0x0800438c
 8004338:	08004390 	.word	0x08004390

0800433c <memset>:
 800433c:	4402      	add	r2, r0
 800433e:	4603      	mov	r3, r0
 8004340:	4293      	cmp	r3, r2
 8004342:	d100      	bne.n	8004346 <memset+0xa>
 8004344:	4770      	bx	lr
 8004346:	f803 1b01 	strb.w	r1, [r3], #1
 800434a:	e7f9      	b.n	8004340 <memset+0x4>

0800434c <_init>:
 800434c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800434e:	bf00      	nop
 8004350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004352:	bc08      	pop	{r3}
 8004354:	469e      	mov	lr, r3
 8004356:	4770      	bx	lr

08004358 <_fini>:
 8004358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800435a:	bf00      	nop
 800435c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800435e:	bc08      	pop	{r3}
 8004360:	469e      	mov	lr, r3
 8004362:	4770      	bx	lr
